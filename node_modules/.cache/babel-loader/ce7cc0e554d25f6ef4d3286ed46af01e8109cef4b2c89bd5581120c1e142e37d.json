{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nimport { didUpdateToBool } from './util.js';\nfunction parse(_ref) {\n  let [ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes] = _ref;\n  return ids.map((id, index) => ({\n    didUpdate: didUpdateToBool(didUpdate, id),\n    id,\n    info: objectSpread({\n      id\n    }, infos[index].unwrapOr(null)),\n    pendingSwapId: pendingSwaps[index].unwrapOr(null),\n    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()\n  }));\n}\nexport function overview(instanceId, api) {\n  return memo(instanceId, () => api.query.registrar?.parachains && api.query.parachains ? api.query.registrar.parachains().pipe(switchMap(paraIds => combineLatest([of(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), map(parse)) : of([]));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","objectSpread","memo","didUpdateToBool","parse","_ref","ids","didUpdate","infos","pendingSwaps","relayDispatchQueueSizes","id","index","info","unwrapOr","pendingSwapId","relayDispatchQueueSize","toNumber","overview","instanceId","api","query","registrar","parachains","pipe","paraIds","paras","multi","pendingSwap"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/parachains/overview.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nimport { didUpdateToBool } from './util.js';\nfunction parse([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {\n    return ids.map((id, index) => ({\n        didUpdate: didUpdateToBool(didUpdate, id),\n        id,\n        info: objectSpread({ id }, infos[index].unwrapOr(null)),\n        pendingSwapId: pendingSwaps[index].unwrapOr(null),\n        relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()\n    }));\n}\nexport function overview(instanceId, api) {\n    return memo(instanceId, () => api.query.registrar?.parachains && api.query.parachains\n        ? api.query.registrar.parachains().pipe(switchMap((paraIds) => combineLatest([\n            of(paraIds),\n            api.query.parachains.didUpdate(),\n            api.query.registrar.paras.multi(paraIds),\n            api.query.registrar.pendingSwap.multi(paraIds),\n            api.query.parachains.relayDispatchQueueSize.multi(paraIds)\n        ])), map(parse))\n        : of([]));\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACxD,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,eAAe,QAAQ,WAAW;AAC3C,SAASC,KAAKA,CAAAC,IAAA,EAAiE;EAAA,IAAhE,CAACC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,YAAY,EAAEC,uBAAuB,CAAC,GAAAL,IAAA;EACzE,OAAOC,GAAG,CAACR,GAAG,CAAC,CAACa,EAAE,EAAEC,KAAK,MAAM;IAC3BL,SAAS,EAAEJ,eAAe,CAACI,SAAS,EAAEI,EAAE,CAAC;IACzCA,EAAE;IACFE,IAAI,EAAEZ,YAAY,CAAC;MAAEU;IAAG,CAAC,EAAEH,KAAK,CAACI,KAAK,CAAC,CAACE,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvDC,aAAa,EAAEN,YAAY,CAACG,KAAK,CAAC,CAACE,QAAQ,CAAC,IAAI,CAAC;IACjDE,sBAAsB,EAAEN,uBAAuB,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAACK,QAAQ;EACtE,CAAC,CAAC,CAAC;AACP;AACA,OAAO,SAASC,QAAQA,CAACC,UAAU,EAAEC,GAAG,EAAE;EACtC,OAAOlB,IAAI,CAACiB,UAAU,EAAE,MAAMC,GAAG,CAACC,KAAK,CAACC,SAAS,EAAEC,UAAU,IAAIH,GAAG,CAACC,KAAK,CAACE,UAAU,GAC/EH,GAAG,CAACC,KAAK,CAACC,SAAS,CAACC,UAAU,EAAE,CAACC,IAAI,CAACxB,SAAS,CAAEyB,OAAO,IAAK5B,aAAa,CAAC,CACzEE,EAAE,CAAC0B,OAAO,CAAC,EACXL,GAAG,CAACC,KAAK,CAACE,UAAU,CAAChB,SAAS,EAAE,EAChCa,GAAG,CAACC,KAAK,CAACC,SAAS,CAACI,KAAK,CAACC,KAAK,CAACF,OAAO,CAAC,EACxCL,GAAG,CAACC,KAAK,CAACC,SAAS,CAACM,WAAW,CAACD,KAAK,CAACF,OAAO,CAAC,EAC9CL,GAAG,CAACC,KAAK,CAACE,UAAU,CAACP,sBAAsB,CAACW,KAAK,CAACF,OAAO,CAAC,CAC7D,CAAC,CAAC,EAAE3B,GAAG,CAACM,KAAK,CAAC,CAAC,GACdL,EAAE,CAAC,EAAE,CAAC,CAAC;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}