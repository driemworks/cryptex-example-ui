{"ast":null,"code":"import { BigInt } from '@polkadot/x-bigint';\nimport { _1n } from '../bi/consts.js';\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value) {\n  let {\n    isLe = true,\n    isNegative = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!value || !value.length) {\n    return BigInt(0);\n  }\n  const u8a = isLe ? value : value.reverse();\n  const dvI = new DataView(u8a.buffer, u8a.byteOffset);\n  const mod = u8a.length % 2;\n  let result = BigInt(0);\n  // This is mostly written for readability (with the single isNegative shortcut),\n  // as opposed to performance, e.g. `u8aToBn` does loop unrolling, etc.\n  if (isNegative) {\n    for (let i = u8a.length - 2; i >= mod; i -= 2) {\n      result = result * U16_MAX + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n    }\n    if (mod) {\n      result = result * U8_MAX + BigInt(dvI.getUint8(0) ^ 0xff);\n    }\n  } else {\n    for (let i = u8a.length - 2; i >= mod; i -= 2) {\n      result = result * U16_MAX + BigInt(dvI.getUint16(i, true));\n    }\n    if (mod) {\n      result = result * U8_MAX + BigInt(dvI.getUint8(0));\n    }\n  }\n  return isNegative ? result * -_1n - _1n : result;\n}","map":{"version":3,"names":["BigInt","_1n","U8_MAX","U16_MAX","u8aToBigInt","value","isLe","isNegative","arguments","length","undefined","u8a","reverse","dvI","DataView","buffer","byteOffset","mod","result","i","getUint16","getUint8"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/util/u8a/toBigInt.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { _1n } from '../bi/consts.js';\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {\n    if (!value || !value.length) {\n        return BigInt(0);\n    }\n    const u8a = isLe\n        ? value\n        : value.reverse();\n    const dvI = new DataView(u8a.buffer, u8a.byteOffset);\n    const mod = u8a.length % 2;\n    let result = BigInt(0);\n    // This is mostly written for readability (with the single isNegative shortcut),\n    // as opposed to performance, e.g. `u8aToBn` does loop unrolling, etc.\n    if (isNegative) {\n        for (let i = u8a.length - 2; i >= mod; i -= 2) {\n            result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n        }\n        if (mod) {\n            result = (result * U8_MAX) + BigInt(dvI.getUint8(0) ^ 0xff);\n        }\n    }\n    else {\n        for (let i = u8a.length - 2; i >= mod; i -= 2) {\n            result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true));\n        }\n        if (mod) {\n            result = (result * U8_MAX) + BigInt(dvI.getUint8(0));\n        }\n    }\n    return isNegative\n        ? ((result * -_1n) - _1n)\n        : result;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,GAAG,QAAQ,iBAAiB;AACrC,MAAMC,MAAM,GAAGF,MAAM,CAAC,GAAG,CAAC;AAC1B,MAAMG,OAAO,GAAGH,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AACjC;AACA;AACA;AACA;AACA,OAAO,SAASI,WAAWA,CAACC,KAAK,EAA4C;EAAA,IAA1C;IAAEC,IAAI,GAAG,IAAI;IAAEC,UAAU,GAAG;EAAM,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvE,IAAI,CAACH,KAAK,IAAI,CAACA,KAAK,CAACI,MAAM,EAAE;IACzB,OAAOT,MAAM,CAAC,CAAC,CAAC;EACpB;EACA,MAAMW,GAAG,GAAGL,IAAI,GACVD,KAAK,GACLA,KAAK,CAACO,OAAO,EAAE;EACrB,MAAMC,GAAG,GAAG,IAAIC,QAAQ,CAACH,GAAG,CAACI,MAAM,EAAEJ,GAAG,CAACK,UAAU,CAAC;EACpD,MAAMC,GAAG,GAAGN,GAAG,CAACF,MAAM,GAAG,CAAC;EAC1B,IAAIS,MAAM,GAAGlB,MAAM,CAAC,CAAC,CAAC;EACtB;EACA;EACA,IAAIO,UAAU,EAAE;IACZ,KAAK,IAAIY,CAAC,GAAGR,GAAG,CAACF,MAAM,GAAG,CAAC,EAAEU,CAAC,IAAIF,GAAG,EAAEE,CAAC,IAAI,CAAC,EAAE;MAC3CD,MAAM,GAAIA,MAAM,GAAGf,OAAO,GAAIH,MAAM,CAACa,GAAG,CAACO,SAAS,CAACD,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC;IACzE;IACA,IAAIF,GAAG,EAAE;MACLC,MAAM,GAAIA,MAAM,GAAGhB,MAAM,GAAIF,MAAM,CAACa,GAAG,CAACQ,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAC/D;EACJ,CAAC,MACI;IACD,KAAK,IAAIF,CAAC,GAAGR,GAAG,CAACF,MAAM,GAAG,CAAC,EAAEU,CAAC,IAAIF,GAAG,EAAEE,CAAC,IAAI,CAAC,EAAE;MAC3CD,MAAM,GAAIA,MAAM,GAAGf,OAAO,GAAIH,MAAM,CAACa,GAAG,CAACO,SAAS,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC;IAChE;IACA,IAAIF,GAAG,EAAE;MACLC,MAAM,GAAIA,MAAM,GAAGhB,MAAM,GAAIF,MAAM,CAACa,GAAG,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxD;EACJ;EACA,OAAOd,UAAU,GACTW,MAAM,GAAG,CAACjB,GAAG,GAAIA,GAAG,GACtBiB,MAAM;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}