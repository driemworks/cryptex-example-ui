{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction zeroBalance(api) {\n  return api.registry.createType('Balance');\n}\nfunction getBalance(api, _ref) {\n  let [freeBalance, reservedBalance, frozenFee, frozenMisc] = _ref;\n  const votingBalance = api.registry.createType('Balance', freeBalance.toBn());\n  return {\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    reservedBalance,\n    votingBalance\n  };\n}\nfunction calcBalances(api, _ref2) {\n  let [accountId, [accountNonce, [primary, ...additional]]] = _ref2;\n  return objectSpread({\n    accountId,\n    accountNonce,\n    additional: additional.map(b => getBalance(api, b))\n  }, getBalance(api, primary));\n}\nfunction queryBalancesFree(api, accountId) {\n  return combineLatest([api.query.balances.freeBalance(accountId), api.query.balances.reservedBalance(accountId), api.query.system.accountNonce(accountId)]).pipe(map(_ref3 => {\n    let [freeBalance, reservedBalance, accountNonce] = _ref3;\n    return [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]];\n  }));\n}\nfunction queryNonceOnly(api, accountId) {\n  const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];\n  return isFunction(api.query.system.account) ? api.query.system.account(accountId).pipe(map(_ref4 => {\n    let {\n      nonce\n    } = _ref4;\n    return fill(nonce);\n  })) : isFunction(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId).pipe(map(nonce => fill(nonce))) : of(fill(api.registry.createType('Index')));\n}\nfunction queryBalancesAccount(api, accountId) {\n  let modules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['balances'];\n  const balances = modules.map(m => api.derive[m]?.customAccount || api.query[m]?.account).filter(q => isFunction(q));\n  const extract = (nonce, data) => [nonce, data.map(_ref5 => {\n    let {\n      feeFrozen,\n      free,\n      miscFrozen,\n      reserved\n    } = _ref5;\n    return [free, reserved, feeFrozen, miscFrozen];\n  })];\n  // NOTE this is for the first case where we do have instances specified\n  return balances.length ? isFunction(api.query.system.account) ? combineLatest([api.query.system.account(accountId), ...balances.map(c => c(accountId))]).pipe(map(_ref6 => {\n    let [{\n      nonce\n    }, ...balances] = _ref6;\n    return extract(nonce, balances);\n  })) : combineLatest([api.query.system.accountNonce(accountId), ...balances.map(c => c(accountId))]).pipe(map(_ref7 => {\n    let [nonce, ...balances] = _ref7;\n    return extract(nonce, balances);\n  })) : queryNonceOnly(api, accountId);\n}\nfunction querySystemAccount(api, accountId) {\n  // AccountInfo is current, support old, eg. Edgeware\n  return api.query.system.account(accountId).pipe(map(infoOrTuple => {\n    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];\n    const nonce = infoOrTuple.nonce || infoOrTuple[0];\n    if (!data || data.isEmpty) {\n      return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];\n    }\n    const {\n      feeFrozen,\n      free,\n      miscFrozen,\n      reserved\n    } = data;\n    return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];\n  }));\n}\n/**\n * @name account\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\nexport function account(instanceId, api) {\n  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');\n  const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';\n  return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => accountId ? combineLatest([of(accountId), nonDefaultBalances ? queryBalancesAccount(api, accountId, balanceInstances) : isFunction(api.query.system?.account) ? querySystemAccount(api, accountId) : isFunction(api.query.balances?.account) ? queryBalancesAccount(api, accountId) : isFunction(api.query.balances?.freeBalance) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]])), map(result => calcBalances(api, result))));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","isFunction","objectSpread","memo","zeroBalance","api","registry","createType","getBalance","_ref","freeBalance","reservedBalance","frozenFee","frozenMisc","votingBalance","toBn","calcBalances","_ref2","accountId","accountNonce","primary","additional","b","queryBalancesFree","query","balances","system","pipe","_ref3","queryNonceOnly","fill","nonce","account","_ref4","queryBalancesAccount","modules","arguments","length","undefined","m","derive","customAccount","filter","q","extract","data","_ref5","feeFrozen","free","miscFrozen","reserved","c","_ref6","_ref7","querySystemAccount","infoOrTuple","isEmpty","instanceId","balanceInstances","getModuleInstances","runtimeVersion","specName","nonDefaultBalances","address","accounts","result"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/balances/account.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction zeroBalance(api) {\n    return api.registry.createType('Balance');\n}\nfunction getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {\n    const votingBalance = api.registry.createType('Balance', freeBalance.toBn());\n    return {\n        freeBalance,\n        frozenFee,\n        frozenMisc,\n        reservedBalance,\n        votingBalance\n    };\n}\nfunction calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {\n    return objectSpread({\n        accountId,\n        accountNonce,\n        additional: additional.map((b) => getBalance(api, b))\n    }, getBalance(api, primary));\n}\nfunction queryBalancesFree(api, accountId) {\n    return combineLatest([\n        api.query.balances.freeBalance(accountId),\n        api.query.balances.reservedBalance(accountId),\n        api.query.system.accountNonce(accountId)\n    ]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [\n        accountNonce,\n        [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]\n    ]));\n}\nfunction queryNonceOnly(api, accountId) {\n    const fill = (nonce) => [\n        nonce,\n        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]\n    ];\n    return isFunction(api.query.system.account)\n        ? api.query.system.account(accountId).pipe(map(({ nonce }) => fill(nonce)))\n        : isFunction(api.query.system.accountNonce)\n            ? api.query.system.accountNonce(accountId).pipe(map((nonce) => fill(nonce)))\n            : of(fill(api.registry.createType('Index')));\n}\nfunction queryBalancesAccount(api, accountId, modules = ['balances']) {\n    const balances = modules\n        .map((m) => api.derive[m]?.customAccount || api.query[m]?.account)\n        .filter((q) => isFunction(q));\n    const extract = (nonce, data) => [\n        nonce,\n        data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])\n    ];\n    // NOTE this is for the first case where we do have instances specified\n    return balances.length\n        ? isFunction(api.query.system.account)\n            ? combineLatest([\n                api.query.system.account(accountId),\n                ...balances.map((c) => c(accountId))\n            ]).pipe(map(([{ nonce }, ...balances]) => extract(nonce, balances)))\n            : combineLatest([\n                api.query.system.accountNonce(accountId),\n                ...balances.map((c) => c(accountId))\n            ]).pipe(map(([nonce, ...balances]) => extract(nonce, balances)))\n        : queryNonceOnly(api, accountId);\n}\nfunction querySystemAccount(api, accountId) {\n    // AccountInfo is current, support old, eg. Edgeware\n    return api.query.system.account(accountId).pipe(map((infoOrTuple) => {\n        const data = infoOrTuple.nonce\n            ? infoOrTuple.data\n            : infoOrTuple[1];\n        const nonce = infoOrTuple.nonce || infoOrTuple[0];\n        if (!data || data.isEmpty) {\n            return [\n                nonce,\n                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]\n            ];\n        }\n        const { feeFrozen, free, miscFrozen, reserved } = data;\n        return [\n            nonce,\n            [[free, reserved, feeFrozen, miscFrozen]]\n        ];\n    }));\n}\n/**\n * @name account\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\nexport function account(instanceId, api) {\n    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');\n    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';\n    return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId) => (accountId\n        ? combineLatest([\n            of(accountId),\n            nonDefaultBalances\n                ? queryBalancesAccount(api, accountId, balanceInstances)\n                : isFunction(api.query.system?.account)\n                    ? querySystemAccount(api, accountId)\n                    : isFunction(api.query.balances?.account)\n                        ? queryBalancesAccount(api, accountId)\n                        : isFunction(api.query.balances?.freeBalance)\n                            ? queryBalancesFree(api, accountId)\n                            : queryNonceOnly(api, accountId)\n        ])\n        : of([api.registry.createType('AccountId'), [\n                api.registry.createType('Index'),\n                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]\n            ]]))), map((result) => calcBalances(api, result))));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}