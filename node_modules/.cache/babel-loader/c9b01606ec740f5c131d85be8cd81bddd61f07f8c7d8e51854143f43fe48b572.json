{"ast":null,"code":"let wasm;\nexport function __wbg_set_wasm(val) {\n  wasm = val;\n}\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n  return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n  if (idx < 132) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\nlet cachedFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n  if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n    cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n  }\n  return cachedFloat64Memory0;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\nlet WASM_VECTOR_LEN = 0;\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\nfunction debugString(val) {\n  // primitive types\n  const type = typeof val;\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return `${val}`;\n  }\n  if (type == 'string') {\n    return `\"${val}\"`;\n  }\n  if (type == 'symbol') {\n    const description = val.description;\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return `Symbol(${description})`;\n    }\n  }\n  if (type == 'function') {\n    const name = val.name;\n    if (typeof name == 'string' && name.length > 0) {\n      return `Function(${name})`;\n    } else {\n      return 'Function';\n    }\n  }\n  // objects\n  if (Array.isArray(val)) {\n    const length = val.length;\n    let debug = '[';\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n    for (let i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n    debug += ']';\n    return debug;\n  }\n  // Test for built-in\n  const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  let className;\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  }\n  // errors\n  if (val instanceof Error) {\n    return `${val.name}: ${val.message}\\n${val.stack}`;\n  }\n  // TODO we could test for more things here, like `Set`s and `Map`s.\n  return className;\n}\n/**\n* @param {bigint} seed\n* @param {number} threshold\n* @returns {any}\n*/\nexport function keygen(seed, threshold) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    wasm.keygen(retptr, seed, threshold);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {any} be_poly\n* @returns {any}\n*/\nexport function calculate_secret(be_poly) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    wasm.calculate_secret(retptr, addHeapObject(be_poly));\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {bigint} r1\n* @param {bigint} r2\n* @param {any} secret\n* @returns {any}\n*/\nexport function calculate_pubkey(r1, r2, secret) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    wasm.calculate_pubkey(retptr, r1, r2, addHeapObject(secret));\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {number} t\n* @param {number} n\n* @param {bigint} r\n* @param {any} coeffs_blob\n* @returns {any}\n*/\nexport function calculate_shares_and_commitments(t, n, r, coeffs_blob) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    wasm.calculate_shares_and_commitments(retptr, t, n, r, addHeapObject(coeffs_blob));\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\nfunction passArray8ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n/**\n* @param {bigint} r2\n* @param {Uint8Array} share_bytes\n* @param {Uint8Array} commitment_bytes\n* @returns {boolean}\n*/\nexport function verify_share(r2, share_bytes, commitment_bytes) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passArray8ToWasm0(share_bytes, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(commitment_bytes, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.verify_share(retptr, r2, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return r0 !== 0;\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {any} pk1\n* @param {any} pk2\n* @returns {any}\n*/\nexport function combine_pubkeys(pk1, pk2) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    wasm.combine_pubkeys(retptr, addHeapObject(pk1), addHeapObject(pk2));\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} s1\n* @param {Uint8Array} s2\n* @returns {Uint8Array}\n*/\nexport function combine_secrets(s1, s2) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passArray8ToWasm0(s1, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(s2, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.combine_secrets(retptr, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v2;\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {bigint} seed\n* @param {Uint8Array} message\n* @param {Uint8Array} secret_key\n* @param {bigint} r\n* @returns {any}\n*/\nexport function sign(seed, message, secret_key, r) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(secret_key, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.sign(retptr, seed, ptr0, len0, ptr1, len1, r);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {bigint} seed\n* @param {Uint8Array} message\n* @param {any} public_key\n* @param {any} signature\n* @param {bigint} r\n* @returns {any}\n*/\nexport function verify(seed, message, public_key, signature, r) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.verify(retptr, seed, ptr0, len0, addHeapObject(public_key), addHeapObject(signature), r);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {bigint} seed\n* @param {bigint} r1\n* @param {Uint8Array} msg\n* @param {any} pk\n* @returns {any}\n*/\nexport function encrypt(seed, r1, msg, pk) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passArray8ToWasm0(msg, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.encrypt(retptr, seed, r1, ptr0, len0, addHeapObject(pk));\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    if (r2) {\n      throw takeObject(r1);\n    }\n    return takeObject(r0);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n\n/**\n* @param {bigint} r2\n* @param {any} ciphertext_blob\n* @param {Uint8Array} sk\n* @returns {Uint8Array}\n*/\nexport function threshold_decrypt(r2, ciphertext_blob, sk) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passArray8ToWasm0(sk, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.threshold_decrypt(retptr, r2, addHeapObject(ciphertext_blob), ptr0, len0);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var r2 = getInt32Memory0()[retptr / 4 + 2];\n    var r3 = getInt32Memory0()[retptr / 4 + 3];\n    if (r3) {\n      throw takeObject(r2);\n    }\n    var v1 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v1;\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\nfunction handleError(f, args) {\n  try {\n    return f.apply(this, args);\n  } catch (e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n  }\n}\nexport function __wbindgen_object_drop_ref(arg0) {\n  takeObject(arg0);\n}\n;\nexport function __wbindgen_error_new(arg0, arg1) {\n  const ret = new Error(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_object(arg0) {\n  const val = getObject(arg0);\n  const ret = typeof val === 'object' && val !== null;\n  return ret;\n}\n;\nexport function __wbindgen_is_undefined(arg0) {\n  const ret = getObject(arg0) === undefined;\n  return ret;\n}\n;\nexport function __wbindgen_in(arg0, arg1) {\n  const ret = (getObject(arg0) in getObject(arg1));\n  return ret;\n}\n;\nexport function __wbindgen_number_new(arg0) {\n  const ret = arg0;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_object_clone_ref(arg0) {\n  const ret = getObject(arg0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_string_new(arg0, arg1) {\n  const ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n  const ret = getObject(arg0) == getObject(arg1);\n  return ret;\n}\n;\nexport function __wbindgen_boolean_get(arg0) {\n  const v = getObject(arg0);\n  const ret = typeof v === 'boolean' ? v ? 1 : 0 : 2;\n  return ret;\n}\n;\nexport function __wbindgen_number_get(arg0, arg1) {\n  const obj = getObject(arg1);\n  const ret = typeof obj === 'number' ? obj : undefined;\n  getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n  getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n}\n;\nexport function __wbindgen_string_get(arg0, arg1) {\n  const obj = getObject(arg1);\n  const ret = typeof obj === 'string' ? obj : undefined;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbg_getwithrefkey_15c62c2b8546208d(arg0, arg1) {\n  const ret = getObject(arg0)[getObject(arg1)];\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_20cbc34131e76824(arg0, arg1, arg2) {\n  getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n}\n;\nexport function __wbg_get_27fe3dac1c4d0224(arg0, arg1) {\n  const ret = getObject(arg0)[arg1 >>> 0];\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_length_e498fbc24f9c1d4f(arg0) {\n  const ret = getObject(arg0).length;\n  return ret;\n}\n;\nexport function __wbg_new_b525de17f44a8943() {\n  const ret = new Array();\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_function(arg0) {\n  const ret = typeof getObject(arg0) === 'function';\n  return ret;\n}\n;\nexport function __wbg_next_b7d530c04fd8b217(arg0) {\n  const ret = getObject(arg0).next;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_next_88560ec06a094dea() {\n  return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_done_1ebec03bbd919843(arg0) {\n  const ret = getObject(arg0).done;\n  return ret;\n}\n;\nexport function __wbg_value_6ac8da5cc5b3efda(arg0) {\n  const ret = getObject(arg0).value;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_iterator_55f114446221aa5a() {\n  const ret = Symbol.iterator;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_get_baf4855f9a986186() {\n  return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_call_95d1ea488d03e4e8() {\n  return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_new_f9876326328f45ed() {\n  const ret = new Object();\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_17224bc548dd1d7b(arg0, arg1, arg2) {\n  getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n}\n;\nexport function __wbg_isArray_39d28997bf6b96b4(arg0) {\n  const ret = Array.isArray(getObject(arg0));\n  return ret;\n}\n;\nexport function __wbg_instanceof_ArrayBuffer_a69f02ee4c4f5065(arg0) {\n  let result;\n  try {\n    result = getObject(arg0) instanceof ArrayBuffer;\n  } catch {\n    result = false;\n  }\n  const ret = result;\n  return ret;\n}\n;\nexport function __wbg_isSafeInteger_8c4789029e885159(arg0) {\n  const ret = Number.isSafeInteger(getObject(arg0));\n  return ret;\n}\n;\nexport function __wbg_buffer_cf65c07de34b9a08(arg0) {\n  const ret = getObject(arg0).buffer;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_new_537b7341ce90bb31(arg0) {\n  const ret = new Uint8Array(getObject(arg0));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_17499e8aa4003ebd(arg0, arg1, arg2) {\n  getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n}\n;\nexport function __wbg_length_27a2afe8ab42b09f(arg0) {\n  const ret = getObject(arg0).length;\n  return ret;\n}\n;\nexport function __wbg_instanceof_Uint8Array_01cebe79ca606cca(arg0) {\n  let result;\n  try {\n    result = getObject(arg0) instanceof Uint8Array;\n  } catch {\n    result = false;\n  }\n  const ret = result;\n  return ret;\n}\n;\nexport function __wbindgen_debug_string(arg0, arg1) {\n  const ret = debugString(getObject(arg1));\n  const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbindgen_throw(arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n}\n;\nexport function __wbindgen_memory() {\n  const ret = wasm.memory;\n  return addHeapObject(ret);\n}\n;","map":{"version":3,"names":["wasm","__wbg_set_wasm","val","heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","isLikeNone","x","cachedFloat64Memory0","getFloat64Memory0","Float64Array","cachedInt32Memory0","getInt32Memory0","Int32Array","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","debugString","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","keygen","seed","threshold","retptr","__wbindgen_add_to_stack_pointer","r0","r1","r2","calculate_secret","be_poly","calculate_pubkey","secret","calculate_shares_and_commitments","t","n","r","coeffs_blob","passArray8ToWasm0","verify_share","share_bytes","commitment_bytes","ptr0","__wbindgen_malloc","len0","ptr1","len1","combine_pubkeys","pk1","pk2","getArrayU8FromWasm0","combine_secrets","s1","s2","v2","__wbindgen_free","sign","secret_key","verify","public_key","signature","encrypt","msg","pk","threshold_decrypt","ciphertext_blob","sk","r3","v1","handleError","f","args","apply","e","__wbindgen_exn_store","__wbindgen_object_drop_ref","arg0","__wbindgen_error_new","arg1","__wbindgen_is_object","__wbindgen_is_undefined","__wbindgen_in","__wbindgen_number_new","__wbindgen_object_clone_ref","__wbindgen_string_new","__wbindgen_jsval_loose_eq","__wbindgen_boolean_get","v","__wbindgen_number_get","__wbindgen_string_get","__wbindgen_realloc","__wbg_getwithrefkey_15c62c2b8546208d","__wbg_set_20cbc34131e76824","arg2","__wbg_get_27fe3dac1c4d0224","__wbg_length_e498fbc24f9c1d4f","__wbg_new_b525de17f44a8943","__wbindgen_is_function","__wbg_next_b7d530c04fd8b217","next","__wbg_next_88560ec06a094dea","arguments","__wbg_done_1ebec03bbd919843","done","__wbg_value_6ac8da5cc5b3efda","value","__wbg_iterator_55f114446221aa5a","Symbol","iterator","__wbg_get_baf4855f9a986186","Reflect","get","__wbg_call_95d1ea488d03e4e8","__wbg_new_f9876326328f45ed","Object","__wbg_set_17224bc548dd1d7b","__wbg_isArray_39d28997bf6b96b4","__wbg_instanceof_ArrayBuffer_a69f02ee4c4f5065","result","ArrayBuffer","__wbg_isSafeInteger_8c4789029e885159","Number","isSafeInteger","__wbg_buffer_cf65c07de34b9a08","__wbg_new_537b7341ce90bb31","__wbg_set_17499e8aa4003ebd","__wbg_length_27a2afe8ab42b09f","__wbg_instanceof_Uint8Array_01cebe79ca606cca","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_memory"],"sources":["/home/driemworks/dkg/dkg-wasm/pkg/dkg_wasm_bg.js"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedFloat64Memory0 = null;\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n/**\n* @param {bigint} seed\n* @param {number} threshold\n* @returns {any}\n*/\nexport function keygen(seed, threshold) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.keygen(retptr, seed, threshold);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {any} be_poly\n* @returns {any}\n*/\nexport function calculate_secret(be_poly) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.calculate_secret(retptr, addHeapObject(be_poly));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {bigint} r1\n* @param {bigint} r2\n* @param {any} secret\n* @returns {any}\n*/\nexport function calculate_pubkey(r1, r2, secret) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.calculate_pubkey(retptr, r1, r2, addHeapObject(secret));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} t\n* @param {number} n\n* @param {bigint} r\n* @param {any} coeffs_blob\n* @returns {any}\n*/\nexport function calculate_shares_and_commitments(t, n, r, coeffs_blob) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.calculate_shares_and_commitments(retptr, t, n, r, addHeapObject(coeffs_blob));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {bigint} r2\n* @param {Uint8Array} share_bytes\n* @param {Uint8Array} commitment_bytes\n* @returns {boolean}\n*/\nexport function verify_share(r2, share_bytes, commitment_bytes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(share_bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(commitment_bytes, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.verify_share(retptr, r2, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {any} pk1\n* @param {any} pk2\n* @returns {any}\n*/\nexport function combine_pubkeys(pk1, pk2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.combine_pubkeys(retptr, addHeapObject(pk1), addHeapObject(pk2));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} s1\n* @param {Uint8Array} s2\n* @returns {Uint8Array}\n*/\nexport function combine_secrets(s1, s2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(s1, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(s2, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.combine_secrets(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {bigint} seed\n* @param {Uint8Array} message\n* @param {Uint8Array} secret_key\n* @param {bigint} r\n* @returns {any}\n*/\nexport function sign(seed, message, secret_key, r) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(secret_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.sign(retptr, seed, ptr0, len0, ptr1, len1, r);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {bigint} seed\n* @param {Uint8Array} message\n* @param {any} public_key\n* @param {any} signature\n* @param {bigint} r\n* @returns {any}\n*/\nexport function verify(seed, message, public_key, signature, r) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verify(retptr, seed, ptr0, len0, addHeapObject(public_key), addHeapObject(signature), r);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {bigint} seed\n* @param {bigint} r1\n* @param {Uint8Array} msg\n* @param {any} pk\n* @returns {any}\n*/\nexport function encrypt(seed, r1, msg, pk) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(msg, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encrypt(retptr, seed, r1, ptr0, len0, addHeapObject(pk));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {bigint} r2\n* @param {any} ciphertext_blob\n* @param {Uint8Array} sk\n* @returns {Uint8Array}\n*/\nexport function threshold_decrypt(r2, ciphertext_blob, sk) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(sk, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.threshold_decrypt(retptr, r2, addHeapObject(ciphertext_blob), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = getObject(arg0) in getObject(arg1);\n    return ret;\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = getObject(arg0) == getObject(arg1);\n    return ret;\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n    getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_getwithrefkey_15c62c2b8546208d(arg0, arg1) {\n    const ret = getObject(arg0)[getObject(arg1)];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_20cbc34131e76824(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nexport function __wbg_get_27fe3dac1c4d0224(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_length_e498fbc24f9c1d4f(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_new_b525de17f44a8943() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nexport function __wbg_next_b7d530c04fd8b217(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_next_88560ec06a094dea() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_done_1ebec03bbd919843(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nexport function __wbg_value_6ac8da5cc5b3efda(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_iterator_55f114446221aa5a() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_get_baf4855f9a986186() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_95d1ea488d03e4e8() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_new_f9876326328f45ed() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_17224bc548dd1d7b(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nexport function __wbg_isArray_39d28997bf6b96b4(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_instanceof_ArrayBuffer_a69f02ee4c4f5065(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof ArrayBuffer;\n    } catch {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_8c4789029e885159(arg0) {\n    const ret = Number.isSafeInteger(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_buffer_cf65c07de34b9a08(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_537b7341ce90bb31(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_17499e8aa4003ebd(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_length_27a2afe8ab42b09f(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_01cebe79ca606cca(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Uint8Array;\n    } catch {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}