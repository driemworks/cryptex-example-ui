{"ast":null,"code":"var _Events_eventemitter;\nimport { __classPrivateFieldGet } from \"tslib\";\nimport { EventEmitter } from 'eventemitter3';\nexport class Events {\n  constructor() {\n    _Events_eventemitter.set(this, new EventEmitter());\n  }\n  emit(type) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return __classPrivateFieldGet(this, _Events_eventemitter, \"f\").emit(type, ...args);\n  }\n  /**\n   * @description Attach an eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.on('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.on('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n  on(type, handler) {\n    __classPrivateFieldGet(this, _Events_eventemitter, \"f\").on(type, handler);\n    return this;\n  }\n  /**\n   * @description Remove the given eventemitter handler\n   *\n   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to unregister.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const handler = (): void => {\n   *  console.log('Connected !);\n   * };\n   *\n   * // Start listening\n   * api.on('connected', handler);\n   *\n   * // Stop listening\n   * api.off('connected', handler);\n   * ```\n   */\n  off(type, handler) {\n    __classPrivateFieldGet(this, _Events_eventemitter, \"f\").removeListener(type, handler);\n    return this;\n  }\n  /**\n   * @description Attach an one-time eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.once('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.once('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n  once(type, handler) {\n    __classPrivateFieldGet(this, _Events_eventemitter, \"f\").once(type, handler);\n    return this;\n  }\n}\n_Events_eventemitter = new WeakMap();","map":{"version":3,"names":["_Events_eventemitter","__classPrivateFieldGet","EventEmitter","Events","constructor","set","emit","type","_len","arguments","length","args","Array","_key","on","handler","off","removeListener","once","WeakMap"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api/base/Events.js"],"sourcesContent":["var _Events_eventemitter;\nimport { __classPrivateFieldGet } from \"tslib\";\nimport { EventEmitter } from 'eventemitter3';\nexport class Events {\n    constructor() {\n        _Events_eventemitter.set(this, new EventEmitter());\n    }\n    emit(type, ...args) {\n        return __classPrivateFieldGet(this, _Events_eventemitter, \"f\").emit(type, ...args);\n    }\n    /**\n     * @description Attach an eventemitter handler to listen to a specific event\n     *\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.on('connected', (): void => {\n     *   console.log('API has been connected to the endpoint');\n     * });\n     *\n     * api.on('disconnected', (): void => {\n     *   console.log('API has been disconnected from the endpoint');\n     * });\n     * ```\n     */\n    on(type, handler) {\n        __classPrivateFieldGet(this, _Events_eventemitter, \"f\").on(type, handler);\n        return this;\n    }\n    /**\n     * @description Remove the given eventemitter handler\n     *\n     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n     * @param handler The callback to unregister.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * const handler = (): void => {\n     *  console.log('Connected !);\n     * };\n     *\n     * // Start listening\n     * api.on('connected', handler);\n     *\n     * // Stop listening\n     * api.off('connected', handler);\n     * ```\n     */\n    off(type, handler) {\n        __classPrivateFieldGet(this, _Events_eventemitter, \"f\").removeListener(type, handler);\n        return this;\n    }\n    /**\n     * @description Attach an one-time eventemitter handler to listen to a specific event\n     *\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.once('connected', (): void => {\n     *   console.log('API has been connected to the endpoint');\n     * });\n     *\n     * api.once('disconnected', (): void => {\n     *   console.log('API has been disconnected from the endpoint');\n     * });\n     * ```\n     */\n    once(type, handler) {\n        __classPrivateFieldGet(this, _Events_eventemitter, \"f\").once(type, handler);\n        return this;\n    }\n}\n_Events_eventemitter = new WeakMap();\n"],"mappings":"AAAA,IAAIA,oBAAoB;AACxB,SAASC,sBAAsB,QAAQ,OAAO;AAC9C,SAASC,YAAY,QAAQ,eAAe;AAC5C,OAAO,MAAMC,MAAM,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACVJ,oBAAoB,CAACK,GAAG,CAAC,IAAI,EAAE,IAAIH,YAAY,EAAE,CAAC;EACtD;EACAI,IAAIA,CAACC,IAAI,EAAW;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IACd,OAAOZ,sBAAsB,CAAC,IAAI,EAAED,oBAAoB,EAAE,GAAG,CAAC,CAACM,IAAI,CAACC,IAAI,EAAE,GAAGI,IAAI,CAAC;EACtF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,EAAEA,CAACP,IAAI,EAAEQ,OAAO,EAAE;IACdd,sBAAsB,CAAC,IAAI,EAAED,oBAAoB,EAAE,GAAG,CAAC,CAACc,EAAE,CAACP,IAAI,EAAEQ,OAAO,CAAC;IACzE,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACT,IAAI,EAAEQ,OAAO,EAAE;IACfd,sBAAsB,CAAC,IAAI,EAAED,oBAAoB,EAAE,GAAG,CAAC,CAACiB,cAAc,CAACV,IAAI,EAAEQ,OAAO,CAAC;IACrF,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,IAAIA,CAACX,IAAI,EAAEQ,OAAO,EAAE;IAChBd,sBAAsB,CAAC,IAAI,EAAED,oBAAoB,EAAE,GAAG,CAAC,CAACkB,IAAI,CAACX,IAAI,EAAEQ,OAAO,CAAC;IAC3E,OAAO,IAAI;EACf;AACJ;AACAf,oBAAoB,GAAG,IAAImB,OAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}