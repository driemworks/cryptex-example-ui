{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { u8aToU8a } from '@polkadot/util';\nimport { ed25519Verify as wasmVerify, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name ed25519Sign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519Verify } from '@polkadot/util-crypto';\n *\n * ed25519Verify([...], [...], [...]); // => true/false\n * ```\n */\nexport function ed25519Verify(message, signature, publicKey, onlyJs) {\n  const messageU8a = u8aToU8a(message);\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const signatureU8a = u8aToU8a(signature);\n  if (publicKeyU8a.length !== 32) {\n    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n  } else if (signatureU8a.length !== 64) {\n    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  }\n  return !onlyJs && isReady() ? wasmVerify(signatureU8a, messageU8a, publicKeyU8a) : nacl.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}","map":{"version":3,"names":["nacl","u8aToU8a","ed25519Verify","wasmVerify","isReady","message","signature","publicKey","onlyJs","messageU8a","publicKeyU8a","signatureU8a","length","Error","sign","detached","verify"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/util-crypto/ed25519/verify.js"],"sourcesContent":["import nacl from 'tweetnacl';\nimport { u8aToU8a } from '@polkadot/util';\nimport { ed25519Verify as wasmVerify, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name ed25519Sign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519Verify } from '@polkadot/util-crypto';\n *\n * ed25519Verify([...], [...], [...]); // => true/false\n * ```\n */\nexport function ed25519Verify(message, signature, publicKey, onlyJs) {\n    const messageU8a = u8aToU8a(message);\n    const publicKeyU8a = u8aToU8a(publicKey);\n    const signatureU8a = u8aToU8a(signature);\n    if (publicKeyU8a.length !== 32) {\n        throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n    }\n    else if (signatureU8a.length !== 64) {\n        throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n    }\n    return !onlyJs && isReady()\n        ? wasmVerify(signatureU8a, messageU8a, publicKeyU8a)\n        : nacl.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,aAAa,IAAIC,UAAU,EAAEC,OAAO,QAAQ,uBAAuB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,aAAaA,CAACG,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,EAAE;EACjE,MAAMC,UAAU,GAAGR,QAAQ,CAACI,OAAO,CAAC;EACpC,MAAMK,YAAY,GAAGT,QAAQ,CAACM,SAAS,CAAC;EACxC,MAAMI,YAAY,GAAGV,QAAQ,CAACK,SAAS,CAAC;EACxC,IAAII,YAAY,CAACE,MAAM,KAAK,EAAE,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAE,+BAA8BH,YAAY,CAACE,MAAO,eAAc,CAAC;EACtF,CAAC,MACI,IAAID,YAAY,CAACC,MAAM,KAAK,EAAE,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAE,+BAA8BF,YAAY,CAACC,MAAO,qBAAoB,CAAC;EAC5F;EACA,OAAO,CAACJ,MAAM,IAAIJ,OAAO,EAAE,GACrBD,UAAU,CAACQ,YAAY,EAAEF,UAAU,EAAEC,YAAY,CAAC,GAClDV,IAAI,CAACc,IAAI,CAACC,QAAQ,CAACC,MAAM,CAACP,UAAU,EAAEE,YAAY,EAAED,YAAY,CAAC;AAC3E"},"metadata":{},"sourceType":"module","externalDependencies":[]}