{"ast":null,"code":"var _ApiPromise_isReadyPromise, _ApiPromise_isReadyOrErrorPromise;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { objectSpread } from '@polkadot/util';\nimport { ApiBase } from '../base/index.js';\nimport { Combinator } from './Combinator.js';\nimport { promiseTracker, toPromiseMethod } from './decorateMethod.js';\n/**\n * # @polkadot/api/promise\n *\n * ## Overview\n *\n * @name ApiPromise\n * @description\n * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.\n *\n * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.\n *\n * @see [[ApiRx]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * // initialise via static create\n * const api = await ApiPromise.create();\n *\n * // make a subscription to the network head\n * api.rpc.chain.subscribeNewHeads((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { ApiPromise, WsProvider } from '@polkadot/api';\n *\n * // initialise a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialise via isReady & new with specific provider\n * const api = await new ApiPromise({ provider }).isReady;\n *\n * // retrieve the block target time\n * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();\n * let last = 0;\n *\n * // subscribe to the current block timestamp, updates automatically (callback provided)\n * api.query.timestamp.now((timestamp) => {\n *   const elapsed = last\n *     ? `, ${timestamp.toNumber() - last}s since last`\n *     : '';\n *\n *   last = timestamp.toNumber();\n *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);\n * });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * ApiPromise.create().then((api) => {\n *   const [nonce] = await api.query.system.account(keyring.alice.address);\n *\n *   api.tx.balances\n *     // create transfer\n *     transfer(keyring.bob.address, 12345)\n *     // sign the transcation\n *     .sign(keyring.alice, { nonce })\n *     // send the transaction (optional status callback)\n *     .send((status) => {\n *       console.log(`current status ${status.type}`);\n *     })\n *     // retrieve the submitted extrinsic hash\n *     .then((hash) => {\n *       console.log(`submitted with hash ${hash}`);\n *     });\n * });\n * ```\n */\nexport class ApiPromise extends ApiBase {\n  /**\n   * @description Creates an instance of the ApiPromise class\n   * @param options Options to create an instance. This can be either [[ApiOptions]] or\n   * an [[WsProvider]].\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * new Api().isReady.then((api) => {\n   *   api.rpc.subscribeNewHeads((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * });\n   * ```\n   */\n  constructor(options) {\n    super(options, 'promise', toPromiseMethod);\n    _ApiPromise_isReadyPromise.set(this, void 0);\n    _ApiPromise_isReadyOrErrorPromise.set(this, void 0);\n    __classPrivateFieldSet(this, _ApiPromise_isReadyPromise, new Promise(resolve => {\n      super.once('ready', () => resolve(this));\n    }), \"f\");\n    __classPrivateFieldSet(this, _ApiPromise_isReadyOrErrorPromise, new Promise((resolve, reject) => {\n      const tracker = promiseTracker(resolve, reject);\n      super.once('ready', () => tracker.resolve(this));\n      super.once('error', error => tracker.reject(error));\n    }), \"f\");\n  }\n  /**\n   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.\n   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a\n   * provider (see the constructor arguments)\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * Api.create().then(async (api) => {\n   *   const timestamp = await api.query.timestamp.now();\n   *\n   *   console.log(`lastest block timestamp ${timestamp}`);\n   * });\n   * ```\n   */\n  static create(options) {\n    const instance = new ApiPromise(options);\n    if (options && options.throwOnConnect) {\n      return instance.isReadyOrError;\n    }\n    // Swallow any rejections on isReadyOrError\n    // (in Node 15.x this creates issues, when not being looked at)\n    instance.isReadyOrError.catch(() => {\n      // ignore\n    });\n    return instance.isReady;\n  }\n  /**\n   * @description Promise that resolves the first time we are connected and loaded\n   */\n  get isReady() {\n    return __classPrivateFieldGet(this, _ApiPromise_isReadyPromise, \"f\");\n  }\n  /**\n   * @description Promise that resolves if we can connect, or reject if there is an error\n   */\n  get isReadyOrError() {\n    return __classPrivateFieldGet(this, _ApiPromise_isReadyOrErrorPromise, \"f\");\n  }\n  /**\n   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)\n   */\n  clone() {\n    return new ApiPromise(objectSpread({}, this._options, {\n      source: this\n    }));\n  }\n  /**\n   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions\n   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`\n   * @param callback A callback that will return an Array of all the values this combinator has been applied to\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';\n   *\n   * // combines values from balance & nonce as it updates\n   * api.combineLatest([\n   *   api.rpc.chain.subscribeNewHeads,\n   *   (cb) => api.query.system.account(address, cb)\n   * ], ([head, [balance, nonce]]) => {\n   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);\n   * });\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async combineLatest(fns, callback) {\n    const combinator = new Combinator(fns, callback);\n    return () => {\n      combinator.unsubscribe();\n    };\n  }\n}\n_ApiPromise_isReadyPromise = new WeakMap(), _ApiPromise_isReadyOrErrorPromise = new WeakMap();","map":{"version":3,"names":["_ApiPromise_isReadyPromise","_ApiPromise_isReadyOrErrorPromise","__classPrivateFieldGet","__classPrivateFieldSet","objectSpread","ApiBase","Combinator","promiseTracker","toPromiseMethod","ApiPromise","constructor","options","set","Promise","resolve","once","reject","tracker","error","create","instance","throwOnConnect","isReadyOrError","catch","isReady","clone","_options","source","combineLatest","fns","callback","combinator","unsubscribe","WeakMap"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api/promise/Api.js"],"sourcesContent":["var _ApiPromise_isReadyPromise, _ApiPromise_isReadyOrErrorPromise;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { objectSpread } from '@polkadot/util';\nimport { ApiBase } from '../base/index.js';\nimport { Combinator } from './Combinator.js';\nimport { promiseTracker, toPromiseMethod } from './decorateMethod.js';\n/**\n * # @polkadot/api/promise\n *\n * ## Overview\n *\n * @name ApiPromise\n * @description\n * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.\n *\n * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.\n *\n * @see [[ApiRx]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * // initialise via static create\n * const api = await ApiPromise.create();\n *\n * // make a subscription to the network head\n * api.rpc.chain.subscribeNewHeads((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { ApiPromise, WsProvider } from '@polkadot/api';\n *\n * // initialise a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialise via isReady & new with specific provider\n * const api = await new ApiPromise({ provider }).isReady;\n *\n * // retrieve the block target time\n * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();\n * let last = 0;\n *\n * // subscribe to the current block timestamp, updates automatically (callback provided)\n * api.query.timestamp.now((timestamp) => {\n *   const elapsed = last\n *     ? `, ${timestamp.toNumber() - last}s since last`\n *     : '';\n *\n *   last = timestamp.toNumber();\n *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);\n * });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * ApiPromise.create().then((api) => {\n *   const [nonce] = await api.query.system.account(keyring.alice.address);\n *\n *   api.tx.balances\n *     // create transfer\n *     transfer(keyring.bob.address, 12345)\n *     // sign the transcation\n *     .sign(keyring.alice, { nonce })\n *     // send the transaction (optional status callback)\n *     .send((status) => {\n *       console.log(`current status ${status.type}`);\n *     })\n *     // retrieve the submitted extrinsic hash\n *     .then((hash) => {\n *       console.log(`submitted with hash ${hash}`);\n *     });\n * });\n * ```\n */\nexport class ApiPromise extends ApiBase {\n    /**\n     * @description Creates an instance of the ApiPromise class\n     * @param options Options to create an instance. This can be either [[ApiOptions]] or\n     * an [[WsProvider]].\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * import Api from '@polkadot/api/promise';\n     *\n     * new Api().isReady.then((api) => {\n     *   api.rpc.subscribeNewHeads((header) => {\n     *     console.log(`new block #${header.number.toNumber()}`);\n     *   });\n     * });\n     * ```\n     */\n    constructor(options) {\n        super(options, 'promise', toPromiseMethod);\n        _ApiPromise_isReadyPromise.set(this, void 0);\n        _ApiPromise_isReadyOrErrorPromise.set(this, void 0);\n        __classPrivateFieldSet(this, _ApiPromise_isReadyPromise, new Promise((resolve) => {\n            super.once('ready', () => resolve(this));\n        }), \"f\");\n        __classPrivateFieldSet(this, _ApiPromise_isReadyOrErrorPromise, new Promise((resolve, reject) => {\n            const tracker = promiseTracker(resolve, reject);\n            super.once('ready', () => tracker.resolve(this));\n            super.once('error', (error) => tracker.reject(error));\n        }), \"f\");\n    }\n    /**\n     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.\n     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a\n     * provider (see the constructor arguments)\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * import Api from '@polkadot/api/promise';\n     *\n     * Api.create().then(async (api) => {\n     *   const timestamp = await api.query.timestamp.now();\n     *\n     *   console.log(`lastest block timestamp ${timestamp}`);\n     * });\n     * ```\n     */\n    static create(options) {\n        const instance = new ApiPromise(options);\n        if (options && options.throwOnConnect) {\n            return instance.isReadyOrError;\n        }\n        // Swallow any rejections on isReadyOrError\n        // (in Node 15.x this creates issues, when not being looked at)\n        instance.isReadyOrError.catch(() => {\n            // ignore\n        });\n        return instance.isReady;\n    }\n    /**\n     * @description Promise that resolves the first time we are connected and loaded\n     */\n    get isReady() {\n        return __classPrivateFieldGet(this, _ApiPromise_isReadyPromise, \"f\");\n    }\n    /**\n     * @description Promise that resolves if we can connect, or reject if there is an error\n     */\n    get isReadyOrError() {\n        return __classPrivateFieldGet(this, _ApiPromise_isReadyOrErrorPromise, \"f\");\n    }\n    /**\n     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)\n     */\n    clone() {\n        return new ApiPromise(objectSpread({}, this._options, { source: this }));\n    }\n    /**\n     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions\n     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`\n     * @param callback A callback that will return an Array of all the values this combinator has been applied to\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';\n     *\n     * // combines values from balance & nonce as it updates\n     * api.combineLatest([\n     *   api.rpc.chain.subscribeNewHeads,\n     *   (cb) => api.query.system.account(address, cb)\n     * ], ([head, [balance, nonce]]) => {\n     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);\n     * });\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async combineLatest(fns, callback) {\n        const combinator = new Combinator(fns, callback);\n        return () => {\n            combinator.unsubscribe();\n        };\n    }\n}\n_ApiPromise_isReadyPromise = new WeakMap(), _ApiPromise_isReadyOrErrorPromise = new WeakMap();\n"],"mappings":"AAAA,IAAIA,0BAA0B,EAAEC,iCAAiC;AACjE,SAASC,sBAAsB,EAAEC,sBAAsB,QAAQ,OAAO;AACtE,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,cAAc,EAAEC,eAAe,QAAQ,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASJ,OAAO,CAAC;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,EAAE,SAAS,EAAEH,eAAe,CAAC;IAC1CR,0BAA0B,CAACY,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC5CX,iCAAiC,CAACW,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACnDT,sBAAsB,CAAC,IAAI,EAAEH,0BAA0B,EAAE,IAAIa,OAAO,CAAEC,OAAO,IAAK;MAC9E,KAAK,CAACC,IAAI,CAAC,OAAO,EAAE,MAAMD,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,GAAG,CAAC;IACRX,sBAAsB,CAAC,IAAI,EAAEF,iCAAiC,EAAE,IAAIY,OAAO,CAAC,CAACC,OAAO,EAAEE,MAAM,KAAK;MAC7F,MAAMC,OAAO,GAAGV,cAAc,CAACO,OAAO,EAAEE,MAAM,CAAC;MAC/C,KAAK,CAACD,IAAI,CAAC,OAAO,EAAE,MAAME,OAAO,CAACH,OAAO,CAAC,IAAI,CAAC,CAAC;MAChD,KAAK,CAACC,IAAI,CAAC,OAAO,EAAGG,KAAK,IAAKD,OAAO,CAACD,MAAM,CAACE,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC,EAAE,GAAG,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,MAAMA,CAACR,OAAO,EAAE;IACnB,MAAMS,QAAQ,GAAG,IAAIX,UAAU,CAACE,OAAO,CAAC;IACxC,IAAIA,OAAO,IAAIA,OAAO,CAACU,cAAc,EAAE;MACnC,OAAOD,QAAQ,CAACE,cAAc;IAClC;IACA;IACA;IACAF,QAAQ,CAACE,cAAc,CAACC,KAAK,CAAC,MAAM;MAChC;IAAA,CACH,CAAC;IACF,OAAOH,QAAQ,CAACI,OAAO;EAC3B;EACA;AACJ;AACA;EACI,IAAIA,OAAOA,CAAA,EAAG;IACV,OAAOtB,sBAAsB,CAAC,IAAI,EAAEF,0BAA0B,EAAE,GAAG,CAAC;EACxE;EACA;AACJ;AACA;EACI,IAAIsB,cAAcA,CAAA,EAAG;IACjB,OAAOpB,sBAAsB,CAAC,IAAI,EAAED,iCAAiC,EAAE,GAAG,CAAC;EAC/E;EACA;AACJ;AACA;EACIwB,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAIhB,UAAU,CAACL,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAACsB,QAAQ,EAAE;MAAEC,MAAM,EAAE;IAAK,CAAC,CAAC,CAAC;EAC5E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA,MAAMC,aAAaA,CAACC,GAAG,EAAEC,QAAQ,EAAE;IAC/B,MAAMC,UAAU,GAAG,IAAIzB,UAAU,CAACuB,GAAG,EAAEC,QAAQ,CAAC;IAChD,OAAO,MAAM;MACTC,UAAU,CAACC,WAAW,EAAE;IAC5B,CAAC;EACL;AACJ;AACAhC,0BAA0B,GAAG,IAAIiC,OAAO,EAAE,EAAEhC,iCAAiC,GAAG,IAAIgC,OAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}