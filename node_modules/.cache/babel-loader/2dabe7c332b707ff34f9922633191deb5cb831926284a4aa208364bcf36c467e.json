{"ast":null,"code":"var _MetadataVersioned_converted, _MetadataVersioned_assertVersion, _MetadataVersioned_getVersion, _MetadataVersioned_metadata;\nimport { __classPrivateFieldGet } from \"tslib\";\nimport { Struct } from '@polkadot/types-codec';\nimport { getUniqTypes, toCallsOnly } from './util/index.js';\nimport { toV10 } from './v9/toV10.js';\nimport { toV11 } from './v10/toV11.js';\nimport { toV12 } from './v11/toV12.js';\nimport { toV13 } from './v12/toV13.js';\nimport { toV14 } from './v13/toV14.js';\nimport { toLatest } from './v14/toLatest.js';\nimport { MagicNumber } from './MagicNumber.js';\nconst KNOWN_VERSIONS = [14, 13, 12, 11, 10, 9];\nconst LATEST_VERSION = KNOWN_VERSIONS[0];\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\nexport class MetadataVersioned extends Struct {\n  constructor(registry, value) {\n    // const timeStart = performance.now()\n    super(registry, {\n      magicNumber: MagicNumber,\n      metadata: 'MetadataAll'\n    }, value);\n    _MetadataVersioned_converted.set(this, new Map());\n    _MetadataVersioned_assertVersion.set(this, version => {\n      if (this.version > version) {\n        throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);\n      }\n      return this.version === version;\n    });\n    _MetadataVersioned_getVersion.set(this, (version, fromPrev) => {\n      const asCurr = `asV${version}`;\n      const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;\n      if (version !== 'latest' && __classPrivateFieldGet(this, _MetadataVersioned_assertVersion, \"f\").call(this, version)) {\n        return __classPrivateFieldGet(this, _MetadataVersioned_metadata, \"f\").call(this)[asCurr];\n      }\n      if (!__classPrivateFieldGet(this, _MetadataVersioned_converted, \"f\").has(version)) {\n        __classPrivateFieldGet(this, _MetadataVersioned_converted, \"f\").set(version, fromPrev(this.registry, this[asPrev], this.version));\n      }\n      return __classPrivateFieldGet(this, _MetadataVersioned_converted, \"f\").get(version);\n    });\n    /**\n     * @description the metadata wrapped\n     */\n    _MetadataVersioned_metadata.set(this, () => {\n      return this.getT('metadata');\n    });\n    // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)\n  }\n  /**\n   * @description Returns the wrapped metadata as a limited calls-only (latest) version\n   */\n  get asCallsOnly() {\n    return new MetadataVersioned(this.registry, {\n      magicNumber: this.magicNumber,\n      metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), LATEST_VERSION])\n    });\n  }\n  /**\n   * @description Returns the wrapped metadata as a V9 object\n   */\n  get asV9() {\n    __classPrivateFieldGet(this, _MetadataVersioned_assertVersion, \"f\").call(this, 9);\n    return __classPrivateFieldGet(this, _MetadataVersioned_metadata, \"f\").call(this).asV9;\n  }\n  /**\n   * @description Returns the wrapped values as a V10 object\n   */\n  get asV10() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 10, toV10);\n  }\n  /**\n   * @description Returns the wrapped values as a V11 object\n   */\n  get asV11() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 11, toV11);\n  }\n  /**\n   * @description Returns the wrapped values as a V12 object\n   */\n  get asV12() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 12, toV12);\n  }\n  /**\n   * @description Returns the wrapped values as a V13 object\n   */\n  get asV13() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 13, toV13);\n  }\n  /**\n   * @description Returns the wrapped values as a V14 object\n   */\n  get asV14() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 14, toV14);\n  }\n  /**\n   * @description Returns the wrapped values as a latest version object\n   */\n  get asLatest() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 'latest', toLatest);\n  }\n  /**\n   * @description The magicNumber for the Metadata (known constant)\n   */\n  get magicNumber() {\n    return this.getT('magicNumber');\n  }\n  /**\n   * @description the metadata version this structure represents\n   */\n  get version() {\n    return __classPrivateFieldGet(this, _MetadataVersioned_metadata, \"f\").call(this).index;\n  }\n  getUniqTypes(throwError) {\n    return getUniqTypes(this.registry, this.asLatest, throwError);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    // HACK(y): ensure that we apply the aliases if we have not done so already, this is\n    // needed to ensure we have the correct overrides (which is only applied in toLatest)\n    // eslint-disable-next-line no-unused-expressions\n    this.asLatest;\n    return super.toJSON();\n  }\n}\n_MetadataVersioned_converted = new WeakMap(), _MetadataVersioned_assertVersion = new WeakMap(), _MetadataVersioned_getVersion = new WeakMap(), _MetadataVersioned_metadata = new WeakMap();","map":{"version":3,"names":["_MetadataVersioned_converted","_MetadataVersioned_assertVersion","_MetadataVersioned_getVersion","_MetadataVersioned_metadata","__classPrivateFieldGet","Struct","getUniqTypes","toCallsOnly","toV10","toV11","toV12","toV13","toV14","toLatest","MagicNumber","KNOWN_VERSIONS","LATEST_VERSION","MetadataVersioned","constructor","registry","value","magicNumber","metadata","set","Map","version","Error","fromPrev","asCurr","asPrev","call","has","get","getT","asCallsOnly","createTypeUnsafe","asLatest","asV9","asV10","asV11","asV12","asV13","asV14","index","throwError","toJSON","WeakMap"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types/metadata/MetadataVersioned.js"],"sourcesContent":["var _MetadataVersioned_converted, _MetadataVersioned_assertVersion, _MetadataVersioned_getVersion, _MetadataVersioned_metadata;\nimport { __classPrivateFieldGet } from \"tslib\";\nimport { Struct } from '@polkadot/types-codec';\nimport { getUniqTypes, toCallsOnly } from './util/index.js';\nimport { toV10 } from './v9/toV10.js';\nimport { toV11 } from './v10/toV11.js';\nimport { toV12 } from './v11/toV12.js';\nimport { toV13 } from './v12/toV13.js';\nimport { toV14 } from './v13/toV14.js';\nimport { toLatest } from './v14/toLatest.js';\nimport { MagicNumber } from './MagicNumber.js';\nconst KNOWN_VERSIONS = [14, 13, 12, 11, 10, 9];\nconst LATEST_VERSION = KNOWN_VERSIONS[0];\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\nexport class MetadataVersioned extends Struct {\n    constructor(registry, value) {\n        // const timeStart = performance.now()\n        super(registry, {\n            magicNumber: MagicNumber,\n            metadata: 'MetadataAll'\n        }, value);\n        _MetadataVersioned_converted.set(this, new Map());\n        _MetadataVersioned_assertVersion.set(this, (version) => {\n            if (this.version > version) {\n                throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);\n            }\n            return this.version === version;\n        });\n        _MetadataVersioned_getVersion.set(this, (version, fromPrev) => {\n            const asCurr = `asV${version}`;\n            const asPrev = version === 'latest'\n                ? `asV${LATEST_VERSION}`\n                : `asV${version - 1}`;\n            if (version !== 'latest' && __classPrivateFieldGet(this, _MetadataVersioned_assertVersion, \"f\").call(this, version)) {\n                return __classPrivateFieldGet(this, _MetadataVersioned_metadata, \"f\").call(this)[asCurr];\n            }\n            if (!__classPrivateFieldGet(this, _MetadataVersioned_converted, \"f\").has(version)) {\n                __classPrivateFieldGet(this, _MetadataVersioned_converted, \"f\").set(version, fromPrev(this.registry, this[asPrev], this.version));\n            }\n            return __classPrivateFieldGet(this, _MetadataVersioned_converted, \"f\").get(version);\n        });\n        /**\n         * @description the metadata wrapped\n         */\n        _MetadataVersioned_metadata.set(this, () => {\n            return this.getT('metadata');\n        });\n        // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)\n    }\n    /**\n     * @description Returns the wrapped metadata as a limited calls-only (latest) version\n     */\n    get asCallsOnly() {\n        return new MetadataVersioned(this.registry, {\n            magicNumber: this.magicNumber,\n            metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), LATEST_VERSION])\n        });\n    }\n    /**\n     * @description Returns the wrapped metadata as a V9 object\n     */\n    get asV9() {\n        __classPrivateFieldGet(this, _MetadataVersioned_assertVersion, \"f\").call(this, 9);\n        return __classPrivateFieldGet(this, _MetadataVersioned_metadata, \"f\").call(this).asV9;\n    }\n    /**\n     * @description Returns the wrapped values as a V10 object\n     */\n    get asV10() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 10, toV10);\n    }\n    /**\n     * @description Returns the wrapped values as a V11 object\n     */\n    get asV11() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 11, toV11);\n    }\n    /**\n     * @description Returns the wrapped values as a V12 object\n     */\n    get asV12() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 12, toV12);\n    }\n    /**\n     * @description Returns the wrapped values as a V13 object\n     */\n    get asV13() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 13, toV13);\n    }\n    /**\n     * @description Returns the wrapped values as a V14 object\n     */\n    get asV14() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 14, toV14);\n    }\n    /**\n     * @description Returns the wrapped values as a latest version object\n     */\n    get asLatest() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, \"f\").call(this, 'latest', toLatest);\n    }\n    /**\n     * @description The magicNumber for the Metadata (known constant)\n     */\n    get magicNumber() {\n        return this.getT('magicNumber');\n    }\n    /**\n     * @description the metadata version this structure represents\n     */\n    get version() {\n        return __classPrivateFieldGet(this, _MetadataVersioned_metadata, \"f\").call(this).index;\n    }\n    getUniqTypes(throwError) {\n        return getUniqTypes(this.registry, this.asLatest, throwError);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        // HACK(y): ensure that we apply the aliases if we have not done so already, this is\n        // needed to ensure we have the correct overrides (which is only applied in toLatest)\n        // eslint-disable-next-line no-unused-expressions\n        this.asLatest;\n        return super.toJSON();\n    }\n}\n_MetadataVersioned_converted = new WeakMap(), _MetadataVersioned_assertVersion = new WeakMap(), _MetadataVersioned_getVersion = new WeakMap(), _MetadataVersioned_metadata = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}