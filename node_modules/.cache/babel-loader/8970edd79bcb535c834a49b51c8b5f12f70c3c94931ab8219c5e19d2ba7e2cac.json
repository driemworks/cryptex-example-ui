{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { isFunction } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction parseFlags(address, _ref) {\n  let [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey] = _ref;\n  const addrStr = address && address.toString();\n  const isIncluded = id => id.toString() === addrStr;\n  return {\n    isCouncil: (electionsMembers?.map(r => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),\n    isSociety: (societyMembers || []).some(isIncluded),\n    isSudo: sudoKey?.toString() === addrStr,\n    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)\n  };\n}\nexport function _flags(instanceId, api) {\n  return memo(instanceId, () => {\n    const results = [undefined, [], [], [], undefined];\n    const calls = [(api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections)?.members, api.query.council?.members, api.query.technicalCommittee?.members, api.query.society?.members, api.query.sudo?.key];\n    const filtered = calls.filter(c => c);\n    if (!filtered.length) {\n      return of(results);\n    }\n    return api.queryMulti(filtered).pipe(map(values => {\n      let resultIndex = -1;\n      for (let i = 0; i < calls.length; i++) {\n        if (isFunction(calls[i])) {\n          results[i] = values[++resultIndex];\n        }\n      }\n      return results;\n    }));\n  });\n}\n/**\n * @name info\n * @description Returns account membership flags\n */\nexport function flags(instanceId, api) {\n  return memo(instanceId, address => api.derive.accounts._flags().pipe(map(r => parseFlags(address, r))));\n}","map":{"version":3,"names":["map","of","isFunction","memo","parseFlags","address","_ref","electionsMembers","councilMembers","technicalCommitteeMembers","societyMembers","sudoKey","addrStr","toString","isIncluded","id","isCouncil","r","Array","isArray","who","some","isSociety","isSudo","isTechCommittee","_flags","instanceId","api","results","undefined","calls","query","phragmenElection","electionsPhragmen","elections","members","council","technicalCommittee","society","sudo","key","filtered","filter","c","length","queryMulti","pipe","values","resultIndex","i","flags","derive","accounts"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/accounts/flags.js"],"sourcesContent":["import { map, of } from 'rxjs';\nimport { isFunction } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {\n    const addrStr = address && address.toString();\n    const isIncluded = (id) => id.toString() === addrStr;\n    return {\n        isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),\n        isSociety: (societyMembers || []).some(isIncluded),\n        isSudo: sudoKey?.toString() === addrStr,\n        isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)\n    };\n}\nexport function _flags(instanceId, api) {\n    return memo(instanceId, () => {\n        const results = [undefined, [], [], [], undefined];\n        const calls = [\n            (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections)?.members,\n            api.query.council?.members,\n            api.query.technicalCommittee?.members,\n            api.query.society?.members,\n            api.query.sudo?.key\n        ];\n        const filtered = calls.filter((c) => c);\n        if (!filtered.length) {\n            return of(results);\n        }\n        return api.queryMulti(filtered).pipe(map((values) => {\n            let resultIndex = -1;\n            for (let i = 0; i < calls.length; i++) {\n                if (isFunction(calls[i])) {\n                    results[i] = values[++resultIndex];\n                }\n            }\n            return results;\n        }));\n    });\n}\n/**\n * @name info\n * @description Returns account membership flags\n */\nexport function flags(instanceId, api) {\n    return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map((r) => parseFlags(address, r))));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}