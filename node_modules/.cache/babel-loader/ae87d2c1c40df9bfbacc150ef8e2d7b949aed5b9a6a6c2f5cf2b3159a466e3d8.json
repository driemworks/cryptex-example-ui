{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nexport function _members(instanceId, api) {\n  return memo(instanceId, accountIds => combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe(map(_ref => {\n    let [accountIds, payouts, strikes, defenderVotes, suspended, vouching] = _ref;\n    return accountIds.map((accountId, index) => ({\n      accountId,\n      isDefenderVoter: defenderVotes[index].isSome,\n      isSuspended: suspended[index].isTrue,\n      payouts: payouts[index],\n      strikes: strikes[index],\n      vote: defenderVotes[index].unwrapOr(undefined),\n      vouching: vouching[index].unwrapOr(undefined)\n    }));\n  })));\n}\n/**\n * @description Get the member info for a society\n */\nexport function members(instanceId, api) {\n  return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","memo","_members","instanceId","api","accountIds","query","society","payouts","multi","strikes","defenderVotes","suspendedMembers","vouching","pipe","_ref","suspended","accountId","index","isDefenderVoter","isSome","isSuspended","isTrue","vote","unwrapOr","undefined","members","derive"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/society/members.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nexport function _members(instanceId, api) {\n    return memo(instanceId, (accountIds) => combineLatest([\n        of(accountIds),\n        api.query.society.payouts.multi(accountIds),\n        api.query.society.strikes.multi(accountIds),\n        api.query.society.defenderVotes.multi(accountIds),\n        api.query.society.suspendedMembers.multi(accountIds),\n        api.query.society.vouching.multi(accountIds)\n    ]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({\n        accountId,\n        isDefenderVoter: defenderVotes[index].isSome,\n        isSuspended: suspended[index].isTrue,\n        payouts: payouts[index],\n        strikes: strikes[index],\n        vote: defenderVotes[index].unwrapOr(undefined),\n        vouching: vouching[index].unwrapOr(undefined)\n    })))));\n}\n/**\n * @description Get the member info for a society\n */\nexport function members(instanceId, api) {\n    return memo(instanceId, () => api.query.society.members().pipe(switchMap((members) => api.derive.society._members(members))));\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACxD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,SAASC,QAAQA,CAACC,UAAU,EAAEC,GAAG,EAAE;EACtC,OAAOH,IAAI,CAACE,UAAU,EAAGE,UAAU,IAAKR,aAAa,CAAC,CAClDE,EAAE,CAACM,UAAU,CAAC,EACdD,GAAG,CAACE,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,KAAK,CAACJ,UAAU,CAAC,EAC3CD,GAAG,CAACE,KAAK,CAACC,OAAO,CAACG,OAAO,CAACD,KAAK,CAACJ,UAAU,CAAC,EAC3CD,GAAG,CAACE,KAAK,CAACC,OAAO,CAACI,aAAa,CAACF,KAAK,CAACJ,UAAU,CAAC,EACjDD,GAAG,CAACE,KAAK,CAACC,OAAO,CAACK,gBAAgB,CAACH,KAAK,CAACJ,UAAU,CAAC,EACpDD,GAAG,CAACE,KAAK,CAACC,OAAO,CAACM,QAAQ,CAACJ,KAAK,CAACJ,UAAU,CAAC,CAC/C,CAAC,CAACS,IAAI,CAAChB,GAAG,CAACiB,IAAA;IAAA,IAAC,CAACV,UAAU,EAAEG,OAAO,EAAEE,OAAO,EAAEC,aAAa,EAAEK,SAAS,EAAEH,QAAQ,CAAC,GAAAE,IAAA;IAAA,OAAKV,UAAU,CAACP,GAAG,CAAC,CAACmB,SAAS,EAAEC,KAAK,MAAM;MACtHD,SAAS;MACTE,eAAe,EAAER,aAAa,CAACO,KAAK,CAAC,CAACE,MAAM;MAC5CC,WAAW,EAAEL,SAAS,CAACE,KAAK,CAAC,CAACI,MAAM;MACpCd,OAAO,EAAEA,OAAO,CAACU,KAAK,CAAC;MACvBR,OAAO,EAAEA,OAAO,CAACQ,KAAK,CAAC;MACvBK,IAAI,EAAEZ,aAAa,CAACO,KAAK,CAAC,CAACM,QAAQ,CAACC,SAAS,CAAC;MAC9CZ,QAAQ,EAAEA,QAAQ,CAACK,KAAK,CAAC,CAACM,QAAQ,CAACC,SAAS;IAChD,CAAC,CAAC,CAAC;EAAA,EAAC,CAAC,CAAC;AACV;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACvB,UAAU,EAAEC,GAAG,EAAE;EACrC,OAAOH,IAAI,CAACE,UAAU,EAAE,MAAMC,GAAG,CAACE,KAAK,CAACC,OAAO,CAACmB,OAAO,EAAE,CAACZ,IAAI,CAACd,SAAS,CAAE0B,OAAO,IAAKtB,GAAG,CAACuB,MAAM,CAACpB,OAAO,CAACL,QAAQ,CAACwB,OAAO,CAAC,CAAC,CAAC,CAAC;AACjI"},"metadata":{},"sourceType":"module","externalDependencies":[]}