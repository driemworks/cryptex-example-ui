{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { u8aToString } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction retrieveNick(api, accountId) {\n  return (accountId && api.query.nicks?.nameOf ? api.query.nicks.nameOf(accountId) : of(undefined)).pipe(map(nameOf => nameOf?.isSome ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber()) : undefined));\n}\n/**\n * @name info\n * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname\n */\nexport function info(instanceId, api) {\n  return memo(instanceId, address => api.derive.accounts.idAndIndex(address).pipe(switchMap(_ref => {\n    let [accountId, accountIndex] = _ref;\n    return combineLatest([of({\n      accountId,\n      accountIndex\n    }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)]);\n  }), map(_ref2 => {\n    let [{\n      accountId,\n      accountIndex\n    }, identity, nickname] = _ref2;\n    return {\n      accountId,\n      accountIndex,\n      identity,\n      nickname\n    };\n  })));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","u8aToString","memo","retrieveNick","api","accountId","query","nicks","nameOf","undefined","pipe","isSome","unwrap","substring","consts","maxLength","toNumber","info","instanceId","address","derive","accounts","idAndIndex","_ref","accountIndex","identity","_ref2","nickname"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/accounts/info.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { u8aToString } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction retrieveNick(api, accountId) {\n    return (accountId && api.query.nicks?.nameOf\n        ? api.query.nicks.nameOf(accountId)\n        : of(undefined)).pipe(map((nameOf) => nameOf?.isSome\n        ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber())\n        : undefined));\n}\n/**\n * @name info\n * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname\n */\nexport function info(instanceId, api) {\n    return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([\n        of({ accountId, accountIndex }),\n        api.derive.accounts.identity(accountId),\n        retrieveNick(api, accountId)\n    ])), map(([{ accountId, accountIndex }, identity, nickname]) => ({\n        accountId, accountIndex, identity, nickname\n    }))));\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACxD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,YAAYA,CAACC,GAAG,EAAEC,SAAS,EAAE;EAClC,OAAO,CAACA,SAAS,IAAID,GAAG,CAACE,KAAK,CAACC,KAAK,EAAEC,MAAM,GACtCJ,GAAG,CAACE,KAAK,CAACC,KAAK,CAACC,MAAM,CAACH,SAAS,CAAC,GACjCN,EAAE,CAACU,SAAS,CAAC,EAAEC,IAAI,CAACZ,GAAG,CAAEU,MAAM,IAAKA,MAAM,EAAEG,MAAM,GAClDV,WAAW,CAACO,MAAM,CAACI,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAET,GAAG,CAACU,MAAM,CAACP,KAAK,CAACQ,SAAS,CAACC,QAAQ,EAAE,CAAC,GACnFP,SAAS,CAAC,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,IAAIA,CAACC,UAAU,EAAEd,GAAG,EAAE;EAClC,OAAOF,IAAI,CAACgB,UAAU,EAAGC,OAAO,IAAKf,GAAG,CAACgB,MAAM,CAACC,QAAQ,CAACC,UAAU,CAACH,OAAO,CAAC,CAACT,IAAI,CAACV,SAAS,CAACuB,IAAA;IAAA,IAAC,CAAClB,SAAS,EAAEmB,YAAY,CAAC,GAAAD,IAAA;IAAA,OAAK1B,aAAa,CAAC,CACrIE,EAAE,CAAC;MAAEM,SAAS;MAAEmB;IAAa,CAAC,CAAC,EAC/BpB,GAAG,CAACgB,MAAM,CAACC,QAAQ,CAACI,QAAQ,CAACpB,SAAS,CAAC,EACvCF,YAAY,CAACC,GAAG,EAAEC,SAAS,CAAC,CAC/B,CAAC;EAAA,EAAC,EAAEP,GAAG,CAAC4B,KAAA;IAAA,IAAC,CAAC;MAAErB,SAAS;MAAEmB;IAAa,CAAC,EAAEC,QAAQ,EAAEE,QAAQ,CAAC,GAAAD,KAAA;IAAA,OAAM;MAC7DrB,SAAS;MAAEmB,YAAY;MAAEC,QAAQ;MAAEE;IACvC,CAAC;EAAA,CAAC,CAAC,CAAC,CAAC;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}