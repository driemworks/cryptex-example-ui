{"ast":null,"code":"var _LRUCache_instances, _LRUCache_data, _LRUCache_refs, _LRUCache_length, _LRUCache_head, _LRUCache_tail, _LRUCache_toHead;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nconst DEFAULT_CAPACITY = 128;\nclass LRUNode {\n  constructor(key) {\n    this.key = key;\n    this.next = this.prev = this;\n  }\n}\nexport class LRUCache {\n  constructor() {\n    let capacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CAPACITY;\n    _LRUCache_instances.add(this);\n    _LRUCache_data.set(this, new Map());\n    _LRUCache_refs.set(this, new Map());\n    _LRUCache_length.set(this, 0);\n    _LRUCache_head.set(this, void 0);\n    _LRUCache_tail.set(this, void 0);\n    this.capacity = capacity;\n    __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, new LRUNode('<empty>'), \"f\"), \"f\");\n  }\n  get length() {\n    return __classPrivateFieldGet(this, _LRUCache_length, \"f\");\n  }\n  get lengthData() {\n    return __classPrivateFieldGet(this, _LRUCache_data, \"f\").size;\n  }\n  get lengthRefs() {\n    return __classPrivateFieldGet(this, _LRUCache_refs, \"f\").size;\n  }\n  entries() {\n    const keys = this.keys();\n    const entries = new Array(keys.length);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      entries[i] = [key, __classPrivateFieldGet(this, _LRUCache_data, \"f\").get(key)];\n    }\n    return entries;\n  }\n  keys() {\n    const keys = [];\n    if (__classPrivateFieldGet(this, _LRUCache_length, \"f\")) {\n      let curr = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n      while (curr !== __classPrivateFieldGet(this, _LRUCache_tail, \"f\")) {\n        keys.push(curr.key);\n        curr = curr.next;\n      }\n      keys.push(curr.key);\n    }\n    return keys;\n  }\n  get(key) {\n    const data = __classPrivateFieldGet(this, _LRUCache_data, \"f\").get(key);\n    if (data) {\n      __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_toHead).call(this, key);\n      return data;\n    }\n    return null;\n  }\n  set(key, value) {\n    if (__classPrivateFieldGet(this, _LRUCache_data, \"f\").has(key)) {\n      __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_toHead).call(this, key);\n    } else {\n      const node = new LRUNode(key);\n      __classPrivateFieldGet(this, _LRUCache_refs, \"f\").set(node.key, node);\n      if (this.length === 0) {\n        __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, node, \"f\"), \"f\");\n      } else {\n        __classPrivateFieldGet(this, _LRUCache_head, \"f\").prev = node;\n        node.next = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n        __classPrivateFieldSet(this, _LRUCache_head, node, \"f\");\n      }\n      if (__classPrivateFieldGet(this, _LRUCache_length, \"f\") === this.capacity) {\n        __classPrivateFieldGet(this, _LRUCache_data, \"f\").delete(__classPrivateFieldGet(this, _LRUCache_tail, \"f\").key);\n        __classPrivateFieldGet(this, _LRUCache_refs, \"f\").delete(__classPrivateFieldGet(this, _LRUCache_tail, \"f\").key);\n        __classPrivateFieldSet(this, _LRUCache_tail, __classPrivateFieldGet(this, _LRUCache_tail, \"f\").prev, \"f\");\n        __classPrivateFieldGet(this, _LRUCache_tail, \"f\").next = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n      } else {\n        __classPrivateFieldSet(this, _LRUCache_length, __classPrivateFieldGet(this, _LRUCache_length, \"f\") + 1, \"f\");\n      }\n    }\n    __classPrivateFieldGet(this, _LRUCache_data, \"f\").set(key, value);\n  }\n}\n_LRUCache_data = new WeakMap(), _LRUCache_refs = new WeakMap(), _LRUCache_length = new WeakMap(), _LRUCache_head = new WeakMap(), _LRUCache_tail = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_toHead = function _LRUCache_toHead(key) {\n  const ref = __classPrivateFieldGet(this, _LRUCache_refs, \"f\").get(key);\n  if (ref && ref !== __classPrivateFieldGet(this, _LRUCache_head, \"f\")) {\n    ref.prev.next = ref.next;\n    ref.next.prev = ref.prev;\n    ref.next = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n    __classPrivateFieldGet(this, _LRUCache_head, \"f\").prev = ref;\n    __classPrivateFieldSet(this, _LRUCache_head, ref, \"f\");\n  }\n};","map":{"version":3,"names":["_LRUCache_instances","_LRUCache_data","_LRUCache_refs","_LRUCache_length","_LRUCache_head","_LRUCache_tail","_LRUCache_toHead","__classPrivateFieldGet","__classPrivateFieldSet","DEFAULT_CAPACITY","LRUNode","constructor","key","next","prev","LRUCache","capacity","arguments","length","undefined","add","set","Map","lengthData","size","lengthRefs","entries","keys","Array","i","get","curr","push","data","call","value","has","node","delete","WeakMap","WeakSet","ref"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/rpc-provider/lru.js"],"sourcesContent":["var _LRUCache_instances, _LRUCache_data, _LRUCache_refs, _LRUCache_length, _LRUCache_head, _LRUCache_tail, _LRUCache_toHead;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nconst DEFAULT_CAPACITY = 128;\nclass LRUNode {\n    constructor(key) {\n        this.key = key;\n        this.next = this.prev = this;\n    }\n}\nexport class LRUCache {\n    constructor(capacity = DEFAULT_CAPACITY) {\n        _LRUCache_instances.add(this);\n        _LRUCache_data.set(this, new Map());\n        _LRUCache_refs.set(this, new Map());\n        _LRUCache_length.set(this, 0);\n        _LRUCache_head.set(this, void 0);\n        _LRUCache_tail.set(this, void 0);\n        this.capacity = capacity;\n        __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, new LRUNode('<empty>'), \"f\"), \"f\");\n    }\n    get length() {\n        return __classPrivateFieldGet(this, _LRUCache_length, \"f\");\n    }\n    get lengthData() {\n        return __classPrivateFieldGet(this, _LRUCache_data, \"f\").size;\n    }\n    get lengthRefs() {\n        return __classPrivateFieldGet(this, _LRUCache_refs, \"f\").size;\n    }\n    entries() {\n        const keys = this.keys();\n        const entries = new Array(keys.length);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            entries[i] = [key, __classPrivateFieldGet(this, _LRUCache_data, \"f\").get(key)];\n        }\n        return entries;\n    }\n    keys() {\n        const keys = [];\n        if (__classPrivateFieldGet(this, _LRUCache_length, \"f\")) {\n            let curr = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n            while (curr !== __classPrivateFieldGet(this, _LRUCache_tail, \"f\")) {\n                keys.push(curr.key);\n                curr = curr.next;\n            }\n            keys.push(curr.key);\n        }\n        return keys;\n    }\n    get(key) {\n        const data = __classPrivateFieldGet(this, _LRUCache_data, \"f\").get(key);\n        if (data) {\n            __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_toHead).call(this, key);\n            return data;\n        }\n        return null;\n    }\n    set(key, value) {\n        if (__classPrivateFieldGet(this, _LRUCache_data, \"f\").has(key)) {\n            __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_toHead).call(this, key);\n        }\n        else {\n            const node = new LRUNode(key);\n            __classPrivateFieldGet(this, _LRUCache_refs, \"f\").set(node.key, node);\n            if (this.length === 0) {\n                __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, node, \"f\"), \"f\");\n            }\n            else {\n                __classPrivateFieldGet(this, _LRUCache_head, \"f\").prev = node;\n                node.next = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n                __classPrivateFieldSet(this, _LRUCache_head, node, \"f\");\n            }\n            if (__classPrivateFieldGet(this, _LRUCache_length, \"f\") === this.capacity) {\n                __classPrivateFieldGet(this, _LRUCache_data, \"f\").delete(__classPrivateFieldGet(this, _LRUCache_tail, \"f\").key);\n                __classPrivateFieldGet(this, _LRUCache_refs, \"f\").delete(__classPrivateFieldGet(this, _LRUCache_tail, \"f\").key);\n                __classPrivateFieldSet(this, _LRUCache_tail, __classPrivateFieldGet(this, _LRUCache_tail, \"f\").prev, \"f\");\n                __classPrivateFieldGet(this, _LRUCache_tail, \"f\").next = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n            }\n            else {\n                __classPrivateFieldSet(this, _LRUCache_length, __classPrivateFieldGet(this, _LRUCache_length, \"f\") + 1, \"f\");\n            }\n        }\n        __classPrivateFieldGet(this, _LRUCache_data, \"f\").set(key, value);\n    }\n}\n_LRUCache_data = new WeakMap(), _LRUCache_refs = new WeakMap(), _LRUCache_length = new WeakMap(), _LRUCache_head = new WeakMap(), _LRUCache_tail = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_toHead = function _LRUCache_toHead(key) {\n    const ref = __classPrivateFieldGet(this, _LRUCache_refs, \"f\").get(key);\n    if (ref && ref !== __classPrivateFieldGet(this, _LRUCache_head, \"f\")) {\n        ref.prev.next = ref.next;\n        ref.next.prev = ref.prev;\n        ref.next = __classPrivateFieldGet(this, _LRUCache_head, \"f\");\n        __classPrivateFieldGet(this, _LRUCache_head, \"f\").prev = ref;\n        __classPrivateFieldSet(this, _LRUCache_head, ref, \"f\");\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}