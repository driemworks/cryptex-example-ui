{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nfunction parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {\n  return {\n    accountId: stashId,\n    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),\n    exposure,\n    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],\n    rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n    stashId,\n    validatorPrefs\n  };\n}\nfunction getLedgers(api, optIds, _ref) {\n  let {\n    withLedger = false\n  } = _ref;\n  const ids = optIds.filter(o => withLedger && !!o && o.isSome).map(o => o.unwrap());\n  const emptyLed = api.registry.createType('Option<StakingLedger>');\n  return (ids.length ? combineLatest(ids.map(s => api.query.staking.ledger(s))) : of([])).pipe(map(optLedgers => {\n    let offset = -1;\n    return optIds.map(o => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);\n  }));\n}\nfunction getStashInfo(api, stashIds, activeEra, _ref2) {\n  let {\n    withController,\n    withDestination,\n    withExposure,\n    withLedger,\n    withNominations,\n    withPrefs\n  } = _ref2;\n  const emptyNoms = api.registry.createType('Option<Nominations>');\n  const emptyRewa = api.registry.createType('RewardDestination');\n  const emptyExpo = api.registry.createType('Exposure');\n  const emptyPrefs = api.registry.createType('ValidatorPrefs');\n  return combineLatest([withController || withLedger ? combineLatest(stashIds.map(s => api.query.staking.bonded(s))) : of(stashIds.map(() => null)), withNominations ? combineLatest(stashIds.map(s => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)), withDestination ? combineLatest(stashIds.map(s => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)), withPrefs ? combineLatest(stashIds.map(s => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)), withExposure ? combineLatest(stashIds.map(s => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))]);\n}\nfunction getBatch(api, activeEra, stashIds, flags) {\n  return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(_ref3 => {\n    let [controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure] = _ref3;\n    return getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))));\n  }));\n}\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\nexport const query = /*#__PURE__*/firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));\nexport function queryMulti(instanceId, api) {\n  return memo(instanceId, (accountIds, flags) => api.derive.session.indexes().pipe(switchMap(_ref4 => {\n    let {\n      activeEra\n    } = _ref4;\n    const stashIds = accountIds.map(a => api.registry.createType('AccountId', a));\n    return stashIds.length ? getBatch(api, activeEra, stashIds, flags) : of([]);\n  })));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","firstMemo","memo","parseDetails","stashId","controllerIdOpt","nominatorsOpt","rewardDestination","validatorPrefs","exposure","stakingLedgerOpt","accountId","controllerId","unwrapOr","nominators","isSome","unwrap","targets","stakingLedger","unwrapOrDefault","getLedgers","api","optIds","_ref","withLedger","ids","filter","o","emptyLed","registry","createType","length","s","query","staking","ledger","pipe","optLedgers","offset","getStashInfo","stashIds","activeEra","_ref2","withController","withDestination","withExposure","withNominations","withPrefs","emptyNoms","emptyRewa","emptyExpo","emptyPrefs","bonded","payee","validators","erasStakers","getBatch","flags","_ref3","stakingLedgerOpts","index","derive","queryMulti","instanceId","accountIds","session","indexes","_ref4","a"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/staking/query.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nfunction parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {\n    return {\n        accountId: stashId,\n        controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),\n        exposure,\n        nominators: nominatorsOpt.isSome\n            ? nominatorsOpt.unwrap().targets\n            : [],\n        rewardDestination,\n        stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n        stashId,\n        validatorPrefs\n    };\n}\nfunction getLedgers(api, optIds, { withLedger = false }) {\n    const ids = optIds\n        .filter((o) => withLedger && !!o && o.isSome)\n        .map((o) => o.unwrap());\n    const emptyLed = api.registry.createType('Option<StakingLedger>');\n    return (ids.length\n        ? combineLatest(ids.map((s) => api.query.staking.ledger(s)))\n        : of([])).pipe(map((optLedgers) => {\n        let offset = -1;\n        return optIds.map((o) => o && o.isSome\n            ? optLedgers[++offset] || emptyLed\n            : emptyLed);\n    }));\n}\nfunction getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {\n    const emptyNoms = api.registry.createType('Option<Nominations>');\n    const emptyRewa = api.registry.createType('RewardDestination');\n    const emptyExpo = api.registry.createType('Exposure');\n    const emptyPrefs = api.registry.createType('ValidatorPrefs');\n    return combineLatest([\n        withController || withLedger\n            ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s)))\n            : of(stashIds.map(() => null)),\n        withNominations\n            ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s)))\n            : of(stashIds.map(() => emptyNoms)),\n        withDestination\n            ? combineLatest(stashIds.map((s) => api.query.staking.payee(s)))\n            : of(stashIds.map(() => emptyRewa)),\n        withPrefs\n            ? combineLatest(stashIds.map((s) => api.query.staking.validators(s)))\n            : of(stashIds.map(() => emptyPrefs)),\n        withExposure\n            ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s)))\n            : of(stashIds.map(() => emptyExpo))\n    ]);\n}\nfunction getBatch(api, activeEra, stashIds, flags) {\n    return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));\n}\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\nexport const query = /*#__PURE__*/ firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));\nexport function queryMulti(instanceId, api) {\n    return memo(instanceId, (accountIds, flags) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {\n        const stashIds = accountIds.map((a) => api.registry.createType('AccountId', a));\n        return stashIds.length\n            ? getBatch(api, activeEra, stashIds, flags)\n            : of([]);\n    })));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}