{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { BN_ZERO } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction mapResult(_ref) {\n  let [result, validators, heartbeats, numBlocks] = _ref;\n  validators.forEach((validator, index) => {\n    const validatorId = validator.toString();\n    const blockCount = numBlocks[index];\n    const hasMessage = !heartbeats[index].isEmpty;\n    const prev = result[validatorId];\n    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {\n      result[validatorId] = {\n        blockCount,\n        hasMessage,\n        isOnline: hasMessage || blockCount.gt(BN_ZERO)\n      };\n    }\n  });\n  return result;\n}\n/**\n * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session\n */\nexport function receivedHeartbeats(instanceId, api) {\n  return memo(instanceId, () => api.query.imOnline?.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(_ref2 => {\n    let {\n      currentIndex,\n      validators\n    } = _ref2;\n    return combineLatest([of({}), of(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))]);\n  }), map(mapResult)) : of({}));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","BN_ZERO","memo","mapResult","_ref","result","validators","heartbeats","numBlocks","forEach","validator","index","validatorId","toString","blockCount","hasMessage","isEmpty","prev","eq","isOnline","gt","receivedHeartbeats","instanceId","api","query","imOnline","derive","staking","overview","pipe","_ref2","currentIndex","multi","_address","authoredBlocks","address"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { BN_ZERO } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction mapResult([result, validators, heartbeats, numBlocks]) {\n    validators.forEach((validator, index) => {\n        const validatorId = validator.toString();\n        const blockCount = numBlocks[index];\n        const hasMessage = !heartbeats[index].isEmpty;\n        const prev = result[validatorId];\n        if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {\n            result[validatorId] = {\n                blockCount,\n                hasMessage,\n                isOnline: hasMessage || blockCount.gt(BN_ZERO)\n            };\n        }\n    });\n    return result;\n}\n/**\n * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session\n */\nexport function receivedHeartbeats(instanceId, api) {\n    return memo(instanceId, () => api.query.imOnline?.receivedHeartbeats\n        ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators }) => combineLatest([\n            of({}),\n            of(validators),\n            api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])),\n            api.query.imOnline.authoredBlocks.multi(validators.map((address) => [currentIndex, address]))\n        ])), map(mapResult))\n        : of({}));\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACxD,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,SAASA,CAAAC,IAAA,EAA8C;EAAA,IAA7C,CAACC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,CAAC,GAAAJ,IAAA;EAC1DE,UAAU,CAACG,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IACrC,MAAMC,WAAW,GAAGF,SAAS,CAACG,QAAQ,EAAE;IACxC,MAAMC,UAAU,GAAGN,SAAS,CAACG,KAAK,CAAC;IACnC,MAAMI,UAAU,GAAG,CAACR,UAAU,CAACI,KAAK,CAAC,CAACK,OAAO;IAC7C,MAAMC,IAAI,GAAGZ,MAAM,CAACO,WAAW,CAAC;IAChC,IAAI,CAACK,IAAI,IAAIA,IAAI,CAACF,UAAU,KAAKA,UAAU,IAAI,CAACE,IAAI,CAACH,UAAU,CAACI,EAAE,CAACJ,UAAU,CAAC,EAAE;MAC5ET,MAAM,CAACO,WAAW,CAAC,GAAG;QAClBE,UAAU;QACVC,UAAU;QACVI,QAAQ,EAAEJ,UAAU,IAAID,UAAU,CAACM,EAAE,CAACnB,OAAO;MACjD,CAAC;IACL;EACJ,CAAC,CAAC;EACF,OAAOI,MAAM;AACjB;AACA;AACA;AACA;AACA,OAAO,SAASgB,kBAAkBA,CAACC,UAAU,EAAEC,GAAG,EAAE;EAChD,OAAOrB,IAAI,CAACoB,UAAU,EAAE,MAAMC,GAAG,CAACC,KAAK,CAACC,QAAQ,EAAEJ,kBAAkB,GAC9DE,GAAG,CAACG,MAAM,CAACC,OAAO,CAACC,QAAQ,EAAE,CAACC,IAAI,CAAC7B,SAAS,CAAC8B,KAAA;IAAA,IAAC;MAAEC,YAAY;MAAEzB;IAAW,CAAC,GAAAwB,KAAA;IAAA,OAAKjC,aAAa,CAAC,CAC3FE,EAAE,CAAC,CAAC,CAAC,CAAC,EACNA,EAAE,CAACO,UAAU,CAAC,EACdiB,GAAG,CAACC,KAAK,CAACC,QAAQ,CAACJ,kBAAkB,CAACW,KAAK,CAAC1B,UAAU,CAACR,GAAG,CAAC,CAACmC,QAAQ,EAAEtB,KAAK,KAAK,CAACoB,YAAY,EAAEpB,KAAK,CAAC,CAAC,CAAC,EACvGY,GAAG,CAACC,KAAK,CAACC,QAAQ,CAACS,cAAc,CAACF,KAAK,CAAC1B,UAAU,CAACR,GAAG,CAAEqC,OAAO,IAAK,CAACJ,YAAY,EAAEI,OAAO,CAAC,CAAC,CAAC,CAChG,CAAC;EAAA,EAAC,EAAErC,GAAG,CAACK,SAAS,CAAC,CAAC,GAClBJ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}