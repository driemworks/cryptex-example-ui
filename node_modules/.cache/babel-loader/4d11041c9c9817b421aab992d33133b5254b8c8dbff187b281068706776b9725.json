{"ast":null,"code":"var _AbstractBase_raw;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class AbstractBase {\n  constructor(registry, value, initialU8aLength) {\n    _AbstractBase_raw.set(this, void 0);\n    this.initialU8aLength = initialU8aLength;\n    __classPrivateFieldSet(this, _AbstractBase_raw, value, \"f\");\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description returns the inner (wrapped value)\n   */\n  get inner() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\");\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n  get isEmpty() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").isEmpty;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").eq(other);\n  }\n  /**\n   * @description Returns a breakdown of the hex encoding for this Codec\n   */\n  inspect() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").inspect();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n  toHex(isLe) {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman(isExtended) {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toJSON();\n  }\n  /**\n   * @description Converts the value in a best-fit primitive form\n   */\n  toPrimitive() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toPrimitive();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  toU8a(isBare) {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toU8a(isBare);\n  }\n  /**\n   * @description Returns the inner wrapped value (equivalent to valueOf)\n   */\n  unwrap() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\");\n  }\n  /**\n   * @description Returns the inner wrapped value\n   */\n  valueOf() {\n    return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\");\n  }\n}\n_AbstractBase_raw = new WeakMap();","map":{"version":3,"names":["_AbstractBase_raw","__classPrivateFieldGet","__classPrivateFieldSet","AbstractBase","constructor","registry","value","initialU8aLength","set","encodedLength","toU8a","length","hash","inner","isEmpty","eq","other","inspect","toHex","isLe","toHuman","isExtended","toJSON","toPrimitive","toString","isBare","unwrap","valueOf","WeakMap"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types-codec/abstract/Base.js"],"sourcesContent":["var _AbstractBase_raw;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class AbstractBase {\n    constructor(registry, value, initialU8aLength) {\n        _AbstractBase_raw.set(this, void 0);\n        this.initialU8aLength = initialU8aLength;\n        __classPrivateFieldSet(this, _AbstractBase_raw, value, \"f\");\n        this.registry = registry;\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get encodedLength() {\n        return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n    get hash() {\n        return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description returns the inner (wrapped value)\n     */\n    get inner() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\");\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n    get isEmpty() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").isEmpty;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    eq(other) {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").eq(other);\n    }\n    /**\n     * @description Returns a breakdown of the hex encoding for this Codec\n     */\n    inspect() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").inspect();\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n    toHex(isLe) {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman(isExtended) {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toHuman(isExtended);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toJSON();\n    }\n    /**\n     * @description Converts the value in a best-fit primitive form\n     */\n    toPrimitive() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toPrimitive();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n    toString() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    toU8a(isBare) {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\").toU8a(isBare);\n    }\n    /**\n     * @description Returns the inner wrapped value (equivalent to valueOf)\n     */\n    unwrap() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\");\n    }\n    /**\n     * @description Returns the inner wrapped value\n     */\n    valueOf() {\n        return __classPrivateFieldGet(this, _AbstractBase_raw, \"f\");\n    }\n}\n_AbstractBase_raw = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}