{"ast":null,"code":"import { lazyMethod, objectSpread, stringCamelCase } from '@polkadot/util';\nimport { lazyVariants } from '../../../create/lazy.js';\nimport { getSiName } from '../../util/index.js';\nimport { objectNameToCamel } from '../util.js';\nimport { createUnchecked } from './createUnchecked.js';\nexport function filterCallsSome(_ref) {\n  let {\n    calls\n  } = _ref;\n  return calls.isSome;\n}\nexport function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {\n  const {\n    fields,\n    index\n  } = variant;\n  const args = new Array(fields.length);\n  for (let a = 0; a < fields.length; a++) {\n    const {\n      name,\n      type,\n      typeName\n    } = fields[a];\n    args[a] = objectSpread({\n      name: stringCamelCase(name.unwrapOr(`param${a}`)),\n      type: getSiName(lookup, type)\n    }, typeName.isSome ? {\n      typeName: typeName.unwrap()\n    } : null);\n  }\n  return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [objectSpread({\n    args\n  }, variant)]));\n}\n/** @internal */\nexport function decorateExtrinsics(registry, _ref2, version) {\n  let {\n    lookup,\n    pallets\n  } = _ref2;\n  const result = {};\n  const filtered = pallets.filter(filterCallsSome);\n  for (let i = 0; i < filtered.length; i++) {\n    const {\n      calls,\n      index,\n      name\n    } = filtered[i];\n    const sectionName = stringCamelCase(name);\n    const sectionIndex = version >= 12 ? index.toNumber() : i;\n    lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, variant => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));\n  }\n  return result;\n}","map":{"version":3,"names":["lazyMethod","objectSpread","stringCamelCase","lazyVariants","getSiName","objectNameToCamel","createUnchecked","filterCallsSome","_ref","calls","isSome","createCallFunction","registry","lookup","variant","sectionName","sectionIndex","fields","index","args","Array","length","a","name","type","typeName","unwrapOr","unwrap","Uint8Array","toNumber","createTypeUnsafe","decorateExtrinsics","_ref2","version","pallets","result","filtered","filter","i"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js"],"sourcesContent":["import { lazyMethod, objectSpread, stringCamelCase } from '@polkadot/util';\nimport { lazyVariants } from '../../../create/lazy.js';\nimport { getSiName } from '../../util/index.js';\nimport { objectNameToCamel } from '../util.js';\nimport { createUnchecked } from './createUnchecked.js';\nexport function filterCallsSome({ calls }) {\n    return calls.isSome;\n}\nexport function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {\n    const { fields, index } = variant;\n    const args = new Array(fields.length);\n    for (let a = 0; a < fields.length; a++) {\n        const { name, type, typeName } = fields[a];\n        args[a] = objectSpread({\n            name: stringCamelCase(name.unwrapOr(`param${a}`)),\n            type: getSiName(lookup, type)\n        }, typeName.isSome\n            ? { typeName: typeName.unwrap() }\n            : null);\n    }\n    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [objectSpread({ args }, variant)]));\n}\n/** @internal */\nexport function decorateExtrinsics(registry, { lookup, pallets }, version) {\n    const result = {};\n    const filtered = pallets.filter(filterCallsSome);\n    for (let i = 0; i < filtered.length; i++) {\n        const { calls, index, name } = filtered[i];\n        const sectionName = stringCamelCase(name);\n        const sectionIndex = version >= 12 ? index.toNumber() : i;\n        lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,EAAEC,eAAe,QAAQ,gBAAgB;AAC1E,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,YAAY;AAC9C,SAASC,eAAe,QAAQ,sBAAsB;AACtD,OAAO,SAASC,eAAeA,CAAAC,IAAA,EAAY;EAAA,IAAX;IAAEC;EAAM,CAAC,GAAAD,IAAA;EACrC,OAAOC,KAAK,CAACC,MAAM;AACvB;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,EAAE;EACrF,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGJ,OAAO;EACjC,MAAMK,IAAI,GAAG,IAAIC,KAAK,CAACH,MAAM,CAACI,MAAM,CAAC;EACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IACpC,MAAM;MAAEC,IAAI;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGR,MAAM,CAACK,CAAC,CAAC;IAC1CH,IAAI,CAACG,CAAC,CAAC,GAAGrB,YAAY,CAAC;MACnBsB,IAAI,EAAErB,eAAe,CAACqB,IAAI,CAACG,QAAQ,CAAE,QAAOJ,CAAE,EAAC,CAAC,CAAC;MACjDE,IAAI,EAAEpB,SAAS,CAACS,MAAM,EAAEW,IAAI;IAChC,CAAC,EAAEC,QAAQ,CAACf,MAAM,GACZ;MAAEe,QAAQ,EAAEA,QAAQ,CAACE,MAAM;IAAG,CAAC,GAC/B,IAAI,CAAC;EACf;EACA,OAAOrB,eAAe,CAACM,QAAQ,EAAEG,WAAW,EAAE,IAAIa,UAAU,CAAC,CAACZ,YAAY,EAAEE,KAAK,CAACW,QAAQ,EAAE,CAAC,CAAC,EAAEjB,QAAQ,CAACkB,gBAAgB,CAAC,wBAAwB,EAAE,CAAC7B,YAAY,CAAC;IAAEkB;EAAK,CAAC,EAAEL,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3L;AACA;AACA,OAAO,SAASiB,kBAAkBA,CAACnB,QAAQ,EAAAoB,KAAA,EAAuBC,OAAO,EAAE;EAAA,IAA9B;IAAEpB,MAAM;IAAEqB;EAAQ,CAAC,GAAAF,KAAA;EAC5D,MAAMG,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,QAAQ,GAAGF,OAAO,CAACG,MAAM,CAAC9B,eAAe,CAAC;EAChD,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACf,MAAM,EAAEiB,CAAC,EAAE,EAAE;IACtC,MAAM;MAAE7B,KAAK;MAAES,KAAK;MAAEK;IAAK,CAAC,GAAGa,QAAQ,CAACE,CAAC,CAAC;IAC1C,MAAMvB,WAAW,GAAGb,eAAe,CAACqB,IAAI,CAAC;IACzC,MAAMP,YAAY,GAAGiB,OAAO,IAAI,EAAE,GAAGf,KAAK,CAACW,QAAQ,EAAE,GAAGS,CAAC;IACzDtC,UAAU,CAACmC,MAAM,EAAEpB,WAAW,EAAE,MAAMZ,YAAY,CAACU,MAAM,EAAEJ,KAAK,CAACkB,MAAM,EAAE,EAAEtB,iBAAiB,EAAGS,OAAO,IAAKH,kBAAkB,CAACC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,CAAC,CAAC,CAAC;EACzL;EACA,OAAOmB,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}