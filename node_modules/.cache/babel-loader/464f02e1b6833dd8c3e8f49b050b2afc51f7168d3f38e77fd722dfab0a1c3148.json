{"ast":null,"code":"import { stringCamelCase } from '@polkadot/util';\nfunction isTx(tx, callIndex) {\n  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];\n}\n/** @internal */\nexport function createUnchecked(registry, section, callIndex, callMetadata) {\n  const expectedArgs = callMetadata.fields;\n  const funcName = stringCamelCase(callMetadata.name);\n  const extrinsicFn = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (expectedArgs.length !== args.length) {\n      throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);\n    }\n    return registry.createTypeUnsafe('Call', [{\n      args,\n      callIndex\n    }, callMetadata]);\n  };\n  extrinsicFn.is = tx => isTx(tx, callIndex);\n  extrinsicFn.callIndex = callIndex;\n  extrinsicFn.meta = callMetadata;\n  extrinsicFn.method = funcName;\n  extrinsicFn.section = section;\n  extrinsicFn.toJSON = () => callMetadata.toJSON();\n  return extrinsicFn;\n}","map":{"version":3,"names":["stringCamelCase","isTx","tx","callIndex","createUnchecked","registry","section","callMetadata","expectedArgs","fields","funcName","name","extrinsicFn","_len","arguments","length","args","Array","_key","Error","createTypeUnsafe","is","meta","method","toJSON"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js"],"sourcesContent":["import { stringCamelCase } from '@polkadot/util';\nfunction isTx(tx, callIndex) {\n    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];\n}\n/** @internal */\nexport function createUnchecked(registry, section, callIndex, callMetadata) {\n    const expectedArgs = callMetadata.fields;\n    const funcName = stringCamelCase(callMetadata.name);\n    const extrinsicFn = (...args) => {\n        if (expectedArgs.length !== args.length) {\n            throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);\n        }\n        return registry.createTypeUnsafe('Call', [{ args, callIndex }, callMetadata]);\n    };\n    extrinsicFn.is = (tx) => isTx(tx, callIndex);\n    extrinsicFn.callIndex = callIndex;\n    extrinsicFn.meta = callMetadata;\n    extrinsicFn.method = funcName;\n    extrinsicFn.section = section;\n    extrinsicFn.toJSON = () => callMetadata.toJSON();\n    return extrinsicFn;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,gBAAgB;AAChD,SAASC,IAAIA,CAACC,EAAE,EAAEC,SAAS,EAAE;EACzB,OAAOD,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC,KAAKA,SAAS,CAAC,CAAC,CAAC,IAAID,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC,KAAKA,SAAS,CAAC,CAAC,CAAC;AAC/E;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,QAAQ,EAAEC,OAAO,EAAEH,SAAS,EAAEI,YAAY,EAAE;EACxE,MAAMC,YAAY,GAAGD,YAAY,CAACE,MAAM;EACxC,MAAMC,QAAQ,GAAGV,eAAe,CAACO,YAAY,CAACI,IAAI,CAAC;EACnD,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAa;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACxB,IAAIV,YAAY,CAACO,MAAM,KAAKC,IAAI,CAACD,MAAM,EAAE;MACrC,MAAM,IAAII,KAAK,CAAE,aAAYb,OAAQ,IAAGI,QAAS,YAAWF,YAAY,CAACO,MAAO,mBAAkBC,IAAI,CAACD,MAAO,GAAE,CAAC;IACrH;IACA,OAAOV,QAAQ,CAACe,gBAAgB,CAAC,MAAM,EAAE,CAAC;MAAEJ,IAAI;MAAEb;IAAU,CAAC,EAAEI,YAAY,CAAC,CAAC;EACjF,CAAC;EACDK,WAAW,CAACS,EAAE,GAAInB,EAAE,IAAKD,IAAI,CAACC,EAAE,EAAEC,SAAS,CAAC;EAC5CS,WAAW,CAACT,SAAS,GAAGA,SAAS;EACjCS,WAAW,CAACU,IAAI,GAAGf,YAAY;EAC/BK,WAAW,CAACW,MAAM,GAAGb,QAAQ;EAC7BE,WAAW,CAACN,OAAO,GAAGA,OAAO;EAC7BM,WAAW,CAACY,MAAM,GAAG,MAAMjB,YAAY,CAACiB,MAAM,EAAE;EAChD,OAAOZ,WAAW;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}