{"ast":null,"code":"import { objectSpread } from '@polkadot/util';\nconst PH_V1_TO_V2 = {\n  assumed_validation_data: {\n    description: 'Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }, {\n      name: 'hash',\n      type: 'Hash'\n    }],\n    type: 'Option<(PersistedValidationData, ValidationCodeHash)>'\n  },\n  availability_cores: {\n    description: 'Yields information on all availability cores as relevant to the child block.',\n    params: [],\n    type: 'Vec<CoreState>'\n  },\n  candidate_events: {\n    description: 'Get a vector of events concerning candidates that occurred within a block.',\n    params: [],\n    type: 'Vec<CandidateEvent>'\n  },\n  candidate_pending_availability: {\n    description: 'Get the receipt of a candidate pending availability.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }],\n    type: 'Option<CommittedCandidateReceipt>'\n  },\n  check_validation_outputs: {\n    description: 'Checks if the given validation outputs pass the acceptance criteria.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }, {\n      name: 'outputs',\n      type: 'CandidateCommitments'\n    }],\n    type: 'bool'\n  },\n  dmq_contents: {\n    description: 'Get all the pending inbound messages in the downward message queue for a para.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }],\n    type: 'Vec<InboundDownwardMessage>'\n  },\n  inbound_hrmp_channels_contents: {\n    description: 'Get the contents of all channels addressed to the given recipient.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }],\n    type: 'Vec<InboundHrmpMessage>'\n  },\n  on_chain_votes: {\n    description: 'Scrape dispute relevant from on-chain, backing votes and resolved disputes.',\n    params: [],\n    type: 'Option<ScrapedOnChainVotes>'\n  },\n  persisted_validation_data: {\n    description: 'Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }, {\n      name: 'assumption',\n      type: 'OccupiedCoreAssumption'\n    }],\n    type: 'Option<PersistedValidationData>'\n  },\n  session_index_for_child: {\n    description: 'Returns the session index expected at a child of the block.',\n    params: [],\n    type: 'SessionIndex'\n  },\n  validation_code: {\n    description: 'Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }, {\n      name: 'assumption',\n      type: 'OccupiedCoreAssumption'\n    }],\n    type: 'ValidationCode'\n  },\n  validation_code_by_hash: {\n    description: 'Get the validation code from its hash.',\n    params: [{\n      name: 'hash',\n      type: 'ValidationCodeHash'\n    }],\n    type: 'Option<ValidationCode>'\n  },\n  validator_groups: {\n    description: 'Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on',\n    params: [],\n    type: '(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)'\n  },\n  validators: {\n    description: 'Get the current validators.',\n    params: [],\n    type: 'Vec<ValidatorId>'\n  }\n};\nconst PH_V2_TO_V3 = {\n  pvfs_require_precheck: {\n    description: 'Returns code hashes of PVFs that require pre-checking by validators in the active set.',\n    params: [],\n    type: 'Vec<ValidationCodeHash>'\n  },\n  session_info: {\n    description: 'Get the session info for the given session, if stored.',\n    params: [{\n      name: 'index',\n      type: 'SessionIndex'\n    }],\n    type: 'Option<SessionInfo>'\n  },\n  submit_pvf_check_statement: {\n    description: 'Submits a PVF pre-checking statement into the transaction pool.',\n    params: [{\n      name: 'stmt',\n      type: 'PvfCheckStatement'\n    }, {\n      name: 'signature',\n      type: 'ValidatorSignature'\n    }],\n    type: 'Null'\n  },\n  validation_code_hash: {\n    description: 'Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.',\n    params: [{\n      name: 'paraId',\n      type: 'ParaId'\n    }, {\n      name: 'assumption',\n      type: 'OccupiedCoreAssumption'\n    }],\n    type: 'Option<ValidationCodeHash>'\n  }\n};\nconst PH_V3 = {\n  disputes: {\n    description: 'Returns all onchain disputes.',\n    params: [],\n    type: 'Vec<(SessionIndex, CandidateHash, DisputeState)>'\n  }\n};\nconst PH_V4 = {\n  session_executor_params: {\n    description: 'Returns execution parameters for the session.',\n    params: [{\n      name: 'sessionIndex',\n      type: 'SessionIndex'\n    }],\n    type: 'Option<ExecutorParams>'\n  }\n};\nexport const runtime = {\n  ParachainHost: [{\n    methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3, PH_V3, PH_V4),\n    version: 4\n  }, {\n    methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3, PH_V3),\n    version: 3\n  }, {\n    methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3),\n    version: 2\n  }, {\n    methods: objectSpread({\n      session_info: {\n        description: 'Get the session info for the given session, if stored.',\n        params: [{\n          name: 'index',\n          type: 'SessionIndex'\n        }],\n        type: 'Option<OldV1SessionInfo>'\n      }\n    }, PH_V1_TO_V2),\n    version: 1\n  }]\n};","map":{"version":3,"names":["objectSpread","PH_V1_TO_V2","assumed_validation_data","description","params","name","type","availability_cores","candidate_events","candidate_pending_availability","check_validation_outputs","dmq_contents","inbound_hrmp_channels_contents","on_chain_votes","persisted_validation_data","session_index_for_child","validation_code","validation_code_by_hash","validator_groups","validators","PH_V2_TO_V3","pvfs_require_precheck","session_info","submit_pvf_check_statement","validation_code_hash","PH_V3","disputes","PH_V4","session_executor_params","runtime","ParachainHost","methods","version"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types/interfaces/parachains/runtime.js"],"sourcesContent":["import { objectSpread } from '@polkadot/util';\nconst PH_V1_TO_V2 = {\n    assumed_validation_data: {\n        description: 'Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            },\n            {\n                name: 'hash',\n                type: 'Hash'\n            }\n        ],\n        type: 'Option<(PersistedValidationData, ValidationCodeHash)>'\n    },\n    availability_cores: {\n        description: 'Yields information on all availability cores as relevant to the child block.',\n        params: [],\n        type: 'Vec<CoreState>'\n    },\n    candidate_events: {\n        description: 'Get a vector of events concerning candidates that occurred within a block.',\n        params: [],\n        type: 'Vec<CandidateEvent>'\n    },\n    candidate_pending_availability: {\n        description: 'Get the receipt of a candidate pending availability.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            }\n        ],\n        type: 'Option<CommittedCandidateReceipt>'\n    },\n    check_validation_outputs: {\n        description: 'Checks if the given validation outputs pass the acceptance criteria.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            },\n            {\n                name: 'outputs',\n                type: 'CandidateCommitments'\n            }\n        ],\n        type: 'bool'\n    },\n    dmq_contents: {\n        description: 'Get all the pending inbound messages in the downward message queue for a para.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            }\n        ],\n        type: 'Vec<InboundDownwardMessage>'\n    },\n    inbound_hrmp_channels_contents: {\n        description: 'Get the contents of all channels addressed to the given recipient.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            }\n        ],\n        type: 'Vec<InboundHrmpMessage>'\n    },\n    on_chain_votes: {\n        description: 'Scrape dispute relevant from on-chain, backing votes and resolved disputes.',\n        params: [],\n        type: 'Option<ScrapedOnChainVotes>'\n    },\n    persisted_validation_data: {\n        description: 'Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            },\n            {\n                name: 'assumption',\n                type: 'OccupiedCoreAssumption'\n            }\n        ],\n        type: 'Option<PersistedValidationData>'\n    },\n    session_index_for_child: {\n        description: 'Returns the session index expected at a child of the block.',\n        params: [],\n        type: 'SessionIndex'\n    },\n    validation_code: {\n        description: 'Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            },\n            {\n                name: 'assumption',\n                type: 'OccupiedCoreAssumption'\n            }\n        ],\n        type: 'ValidationCode'\n    },\n    validation_code_by_hash: {\n        description: 'Get the validation code from its hash.',\n        params: [\n            {\n                name: 'hash',\n                type: 'ValidationCodeHash'\n            }\n        ],\n        type: 'Option<ValidationCode>'\n    },\n    validator_groups: {\n        description: 'Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on',\n        params: [],\n        type: '(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)'\n    },\n    validators: {\n        description: 'Get the current validators.',\n        params: [],\n        type: 'Vec<ValidatorId>'\n    }\n};\nconst PH_V2_TO_V3 = {\n    pvfs_require_precheck: {\n        description: 'Returns code hashes of PVFs that require pre-checking by validators in the active set.',\n        params: [],\n        type: 'Vec<ValidationCodeHash>'\n    },\n    session_info: {\n        description: 'Get the session info for the given session, if stored.',\n        params: [\n            {\n                name: 'index',\n                type: 'SessionIndex'\n            }\n        ],\n        type: 'Option<SessionInfo>'\n    },\n    submit_pvf_check_statement: {\n        description: 'Submits a PVF pre-checking statement into the transaction pool.',\n        params: [\n            {\n                name: 'stmt',\n                type: 'PvfCheckStatement'\n            },\n            {\n                name: 'signature',\n                type: 'ValidatorSignature'\n            }\n        ],\n        type: 'Null'\n    },\n    validation_code_hash: {\n        description: 'Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.',\n        params: [\n            {\n                name: 'paraId',\n                type: 'ParaId'\n            },\n            {\n                name: 'assumption',\n                type: 'OccupiedCoreAssumption'\n            }\n        ],\n        type: 'Option<ValidationCodeHash>'\n    }\n};\nconst PH_V3 = {\n    disputes: {\n        description: 'Returns all onchain disputes.',\n        params: [],\n        type: 'Vec<(SessionIndex, CandidateHash, DisputeState)>'\n    }\n};\nconst PH_V4 = {\n    session_executor_params: {\n        description: 'Returns execution parameters for the session.',\n        params: [\n            {\n                name: 'sessionIndex',\n                type: 'SessionIndex'\n            }\n        ],\n        type: 'Option<ExecutorParams>'\n    }\n};\nexport const runtime = {\n    ParachainHost: [\n        {\n            methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3, PH_V3, PH_V4),\n            version: 4\n        },\n        {\n            methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3, PH_V3),\n            version: 3\n        },\n        {\n            methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3),\n            version: 2\n        },\n        {\n            methods: objectSpread({\n                session_info: {\n                    description: 'Get the session info for the given session, if stored.',\n                    params: [\n                        {\n                            name: 'index',\n                            type: 'SessionIndex'\n                        }\n                    ],\n                    type: 'Option<OldV1SessionInfo>'\n                }\n            }, PH_V1_TO_V2),\n            version: 1\n        }\n    ]\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}