{"ast":null,"code":"let wasm;\nexport function __wbg_set_wasm(val) {\n  wasm = val;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {bigint} seed\n* @param {number} threshold\n* @param {bigint} r1\n* @param {bigint} r2\n* @returns {string}\n*/\nexport function keygen(seed, threshold, r1, r2) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    wasm.keygen(retptr, seed, threshold, r1, r2);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n    wasm.__wbindgen_free(r0, r1);\n  }\n}","map":{"version":3,"names":["wasm","__wbg_set_wasm","val","cachedInt32Memory0","getInt32Memory0","byteLength","Int32Array","memory","buffer","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","Uint8Array","getStringFromWasm0","ptr","len","subarray","keygen","seed","threshold","r1","r2","retptr","__wbindgen_add_to_stack_pointer","r0","__wbindgen_free"],"sources":["/home/driemworks/dkg/pkg/dkg_bg.js"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {bigint} seed\n* @param {number} threshold\n* @param {bigint} r1\n* @param {bigint} r2\n* @returns {string}\n*/\nexport function keygen(seed, threshold, r1, r2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.keygen(retptr, seed, threshold, r1, r2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n"],"mappings":"AAAA,IAAIA,IAAI;AACR,OAAO,SAASC,cAAcA,CAACC,GAAG,EAAE;EAChCF,IAAI,GAAGE,GAAG;AACd;AAGA,IAAIC,kBAAkB,GAAG,IAAI;AAE7B,SAASC,eAAeA,CAAA,EAAG;EACvB,IAAID,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,CAACE,UAAU,KAAK,CAAC,EAAE;IACpEF,kBAAkB,GAAG,IAAIG,UAAU,CAACN,IAAI,CAACO,MAAM,CAACC,MAAM,CAAC;EAC3D;EACA,OAAOL,kBAAkB;AAC7B;AAEA,MAAMM,YAAY,GAAG,OAAOC,WAAW,KAAK,WAAW,GAAG,CAAC,CAAC,EAAEC,MAAM,CAACC,OAAO,EAAE,MAAM,CAAC,CAACF,WAAW,GAAGA,WAAW;AAE/G,IAAIG,iBAAiB,GAAG,IAAIJ,YAAY,CAAC,OAAO,EAAE;EAAEK,SAAS,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAEnFF,iBAAiB,CAACG,MAAM,EAAE;AAE1B,IAAIC,kBAAkB,GAAG,IAAI;AAE7B,SAASC,eAAeA,CAAA,EAAG;EACvB,IAAID,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,CAACZ,UAAU,KAAK,CAAC,EAAE;IACpEY,kBAAkB,GAAG,IAAIE,UAAU,CAACnB,IAAI,CAACO,MAAM,CAACC,MAAM,CAAC;EAC3D;EACA,OAAOS,kBAAkB;AAC7B;AAEA,SAASG,kBAAkBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAClC,OAAOT,iBAAiB,CAACG,MAAM,CAACE,eAAe,EAAE,CAACK,QAAQ,CAACF,GAAG,EAAEA,GAAG,GAAGC,GAAG,CAAC,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,MAAMA,CAACC,IAAI,EAAEC,SAAS,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAC5C,IAAI;IACA,MAAMC,MAAM,GAAG7B,IAAI,CAAC8B,+BAA+B,CAAC,CAAC,EAAE,CAAC;IACxD9B,IAAI,CAACwB,MAAM,CAACK,MAAM,EAAEJ,IAAI,EAAEC,SAAS,EAAEC,EAAE,EAAEC,EAAE,CAAC;IAC5C,IAAIG,EAAE,GAAG3B,eAAe,EAAE,CAACyB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAIF,EAAE,GAAGvB,eAAe,EAAE,CAACyB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1C,OAAOT,kBAAkB,CAACW,EAAE,EAAEJ,EAAE,CAAC;EACrC,CAAC,SAAS;IACN3B,IAAI,CAAC8B,+BAA+B,CAAC,EAAE,CAAC;IACxC9B,IAAI,CAACgC,eAAe,CAACD,EAAE,EAAEJ,EAAE,CAAC;EAChC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}