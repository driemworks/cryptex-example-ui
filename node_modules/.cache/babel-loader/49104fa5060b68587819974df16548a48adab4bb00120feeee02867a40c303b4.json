{"ast":null,"code":"const recordIdentity = record => record;\nfunction filterAndApply(events, section, methods, onFound) {\n  return events.filter(_ref => {\n    let {\n      event\n    } = _ref;\n    return section === event.section && methods.includes(event.method);\n  }).map(record => onFound(record));\n}\nfunction getDispatchError(_ref2) {\n  let {\n    event: {\n      data: [dispatchError]\n    }\n  } = _ref2;\n  return dispatchError;\n}\nfunction getDispatchInfo(_ref3) {\n  let {\n    event: {\n      data,\n      method\n    }\n  } = _ref3;\n  return method === 'ExtrinsicSuccess' ? data[0] : data[1];\n}\nfunction extractError() {\n  let events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];\n}\nfunction extractInfo() {\n  let events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];\n}\nexport class SubmittableResult {\n  constructor(_ref4) {\n    let {\n      blockNumber,\n      dispatchError,\n      dispatchInfo,\n      events,\n      internalError,\n      status,\n      txHash,\n      txIndex\n    } = _ref4;\n    this.dispatchError = dispatchError || extractError(events);\n    this.dispatchInfo = dispatchInfo || extractInfo(events);\n    this.events = events || [];\n    this.internalError = internalError;\n    this.status = status;\n    this.txHash = txHash;\n    this.txIndex = txIndex;\n    this.blockNumber = blockNumber;\n  }\n  get isCompleted() {\n    return this.isError || this.status.isInBlock || this.status.isFinalized;\n  }\n  get isError() {\n    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n  }\n  get isFinalized() {\n    return this.status.isFinalized;\n  }\n  get isInBlock() {\n    return this.status.isInBlock;\n  }\n  get isWarning() {\n    return this.status.isRetracted;\n  }\n  /**\n   * @description Filters EventRecords for the specified method & section (there could be multiple)\n   */\n  filterRecords(section, method) {\n    return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);\n  }\n  /**\n   * @description Finds an EventRecord for the specified method & section\n   */\n  findRecord(section, method) {\n    return this.filterRecords(section, method)[0];\n  }\n  /**\n   * @description Creates a human representation of the output\n   */\n  toHuman(isExtended) {\n    return {\n      dispatchError: this.dispatchError?.toHuman(),\n      dispatchInfo: this.dispatchInfo?.toHuman(),\n      events: this.events.map(e => e.toHuman(isExtended)),\n      internalError: this.internalError?.message.toString(),\n      status: this.status.toHuman(isExtended)\n    };\n  }\n}","map":{"version":3,"names":["recordIdentity","record","filterAndApply","events","section","methods","onFound","filter","_ref","event","includes","method","map","getDispatchError","_ref2","data","dispatchError","getDispatchInfo","_ref3","extractError","arguments","length","undefined","extractInfo","SubmittableResult","constructor","_ref4","blockNumber","dispatchInfo","internalError","status","txHash","txIndex","isCompleted","isError","isInBlock","isFinalized","isDropped","isFinalityTimeout","isInvalid","isUsurped","isWarning","isRetracted","filterRecords","Array","isArray","findRecord","toHuman","isExtended","e","message","toString"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api/submittable/Result.js"],"sourcesContent":["const recordIdentity = (record) => record;\nfunction filterAndApply(events, section, methods, onFound) {\n    return events\n        .filter(({ event }) => section === event.section &&\n        methods.includes(event.method))\n        .map((record) => onFound(record));\n}\nfunction getDispatchError({ event: { data: [dispatchError] } }) {\n    return dispatchError;\n}\nfunction getDispatchInfo({ event: { data, method } }) {\n    return method === 'ExtrinsicSuccess'\n        ? data[0]\n        : data[1];\n}\nfunction extractError(events = []) {\n    return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];\n}\nfunction extractInfo(events = []) {\n    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];\n}\nexport class SubmittableResult {\n    constructor({ blockNumber, dispatchError, dispatchInfo, events, internalError, status, txHash, txIndex }) {\n        this.dispatchError = dispatchError || extractError(events);\n        this.dispatchInfo = dispatchInfo || extractInfo(events);\n        this.events = events || [];\n        this.internalError = internalError;\n        this.status = status;\n        this.txHash = txHash;\n        this.txIndex = txIndex;\n        this.blockNumber = blockNumber;\n    }\n    get isCompleted() {\n        return this.isError || this.status.isInBlock || this.status.isFinalized;\n    }\n    get isError() {\n        return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n    }\n    get isFinalized() {\n        return this.status.isFinalized;\n    }\n    get isInBlock() {\n        return this.status.isInBlock;\n    }\n    get isWarning() {\n        return this.status.isRetracted;\n    }\n    /**\n     * @description Filters EventRecords for the specified method & section (there could be multiple)\n     */\n    filterRecords(section, method) {\n        return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);\n    }\n    /**\n     * @description Finds an EventRecord for the specified method & section\n     */\n    findRecord(section, method) {\n        return this.filterRecords(section, method)[0];\n    }\n    /**\n     * @description Creates a human representation of the output\n     */\n    toHuman(isExtended) {\n        return {\n            dispatchError: this.dispatchError?.toHuman(),\n            dispatchInfo: this.dispatchInfo?.toHuman(),\n            events: this.events.map((e) => e.toHuman(isExtended)),\n            internalError: this.internalError?.message.toString(),\n            status: this.status.toHuman(isExtended)\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}