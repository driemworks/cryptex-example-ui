{"ast":null,"code":"var _InnerChecker_healthCallback, _InnerChecker_currentHealthCheckId, _InnerChecker_currentHealthTimeout, _InnerChecker_currentSubunsubRequestId, _InnerChecker_currentSubscriptionId, _InnerChecker_requestToSmoldot, _InnerChecker_isSyncing, _InnerChecker_nextRequestId, _HealthCheckError_cause;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { stringify } from '@polkadot/util';\n/*\n * Creates a new health checker.\n *\n * The role of the health checker is to report to the user the health of a smoldot chain.\n *\n * In order to use it, start by creating a health checker, and call `setSendJsonRpc` to set the\n * way to send a JSON-RPC request to a chain. The health checker is disabled by default. Use\n * `start()` in order to start the health checks. The `start()` function must be passed a callback called\n * when an update to the health of the node is available.\n *\n * In order to send a JSON-RPC request to the chain, you **must** use the `sendJsonRpc` function\n * of the health checker. The health checker rewrites the `id` of the requests it receives.\n *\n * When the chain send a JSON-RPC response, it must be passed to `responsePassThrough()`. This\n * function intercepts the responses destined to the requests that have been emitted by the health\n * checker and returns `null`. If the response doesn't concern the health checker, the response is\n * simply returned by the function.\n *\n * # How it works\n *\n * The health checker periodically calls the `system_health` JSON-RPC call in order to determine\n * the health of the chain.\n *\n * In addition to this, as long as the health check reports that `isSyncing` is `true`, the\n * health checker also maintains a subscription to new best blocks using `chain_subscribeNewHeads`.\n * Whenever a new block is notified, a health check is performed immediately in order to determine\n * whether `isSyncing` has changed to `false`.\n *\n * Thanks to this subscription, the latency of the report of the switch from `isSyncing: true` to\n * `isSyncing: false` is very low.\n *\n */\nexport function healthChecker() {\n  // `null` if health checker is not started.\n  let checker = null;\n  let sendJsonRpc = null;\n  return {\n    responsePassThrough: jsonRpcResponse => {\n      if (checker === null) {\n        return jsonRpcResponse;\n      }\n      return checker.responsePassThrough(jsonRpcResponse);\n    },\n    sendJsonRpc: request => {\n      if (!sendJsonRpc) {\n        throw new Error('setSendJsonRpc must be called before sending requests');\n      }\n      if (checker === null) {\n        sendJsonRpc(request);\n      } else {\n        checker.sendJsonRpc(request);\n      }\n    },\n    setSendJsonRpc: cb => {\n      sendJsonRpc = cb;\n    },\n    start: healthCallback => {\n      if (checker !== null) {\n        throw new Error(\"Can't start the health checker multiple times in parallel\");\n      } else if (!sendJsonRpc) {\n        throw new Error('setSendJsonRpc must be called before starting the health checks');\n      }\n      checker = new InnerChecker(healthCallback, sendJsonRpc);\n      checker.update(true);\n    },\n    stop: () => {\n      if (checker === null) {\n        return;\n      } // Already stopped.\n      checker.destroy();\n      checker = null;\n    }\n  };\n}\nclass InnerChecker {\n  constructor(healthCallback, requestToSmoldot) {\n    _InnerChecker_healthCallback.set(this, void 0);\n    _InnerChecker_currentHealthCheckId.set(this, null);\n    _InnerChecker_currentHealthTimeout.set(this, null);\n    _InnerChecker_currentSubunsubRequestId.set(this, null);\n    _InnerChecker_currentSubscriptionId.set(this, null);\n    _InnerChecker_requestToSmoldot.set(this, void 0);\n    _InnerChecker_isSyncing.set(this, false);\n    _InnerChecker_nextRequestId.set(this, 0);\n    this.sendJsonRpc = request => {\n      // Replace the `id` in the request to prefix the request ID with `extern:`.\n      let parsedRequest;\n      try {\n        parsedRequest = JSON.parse(request);\n      } catch {\n        return;\n      }\n      if (parsedRequest.id) {\n        const newId = 'extern:' + stringify(parsedRequest.id);\n        parsedRequest.id = newId;\n      }\n      __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, parsedRequest);\n    };\n    this.responsePassThrough = jsonRpcResponse => {\n      let parsedResponse;\n      try {\n        parsedResponse = JSON.parse(jsonRpcResponse);\n      } catch {\n        return jsonRpcResponse;\n      }\n      // Check whether response is a response to `system_health`.\n      if (parsedResponse.id && __classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, \"f\") === parsedResponse.id) {\n        __classPrivateFieldSet(this, _InnerChecker_currentHealthCheckId, null, \"f\");\n        // Check whether query was successful. It is possible for queries to fail for\n        // various reasons, such as the client being overloaded.\n        if (!parsedResponse.result) {\n          this.update(false);\n          return null;\n        }\n        __classPrivateFieldGet(this, _InnerChecker_healthCallback, \"f\").call(this, parsedResponse.result);\n        __classPrivateFieldSet(this, _InnerChecker_isSyncing, parsedResponse.result.isSyncing, \"f\");\n        this.update(false);\n        return null;\n      }\n      // Check whether response is a response to the subscription or unsubscription.\n      if (parsedResponse.id && __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\") === parsedResponse.id) {\n        __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, null, \"f\");\n        // Check whether query was successful. It is possible for queries to fail for\n        // various reasons, such as the client being overloaded.\n        if (!parsedResponse.result) {\n          this.update(false);\n          return null;\n        }\n        if (__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n          __classPrivateFieldSet(this, _InnerChecker_currentSubscriptionId, null, \"f\");\n        } else {\n          __classPrivateFieldSet(this, _InnerChecker_currentSubscriptionId, parsedResponse.result, \"f\");\n        }\n        this.update(false);\n        return null;\n      }\n      // Check whether response is a notification to a subscription.\n      if (parsedResponse.params && __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\") && parsedResponse.params.subscription === __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n        // Note that after a successful subscription, a notification containing\n        // the current best block is always returned. Considering that a\n        // subscription is performed in response to a health check, calling\n        // `startHealthCheck()` here will lead to a second health check.\n        // It might seem redundant to perform two health checks in a quick\n        // succession, but doing so doesn't lead to any problem, and it is\n        // actually possible for the health to have changed in between as the\n        // current best block might have been updated during the subscription\n        // request.\n        this.update(true);\n        return null;\n      }\n      // Response doesn't concern us.\n      if (parsedResponse.id) {\n        const id = parsedResponse.id;\n        // Need to remove the `extern:` prefix.\n        if (!id.startsWith('extern:')) {\n          throw new Error('State inconsistency in health checker');\n        }\n        const newId = JSON.parse(id.slice('extern:'.length));\n        parsedResponse.id = newId;\n      }\n      return stringify(parsedResponse);\n    };\n    this.update = startNow => {\n      // If `startNow`, clear `#currentHealthTimeout` so that it is set below.\n      if (startNow && __classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\")) {\n        clearTimeout(__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\"));\n        __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, \"f\");\n      }\n      if (!__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\")) {\n        const startHealthRequest = () => {\n          __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, \"f\");\n          // No matter what, don't start a health request if there is already one in progress.\n          // This is sane to do because receiving a response to a health request calls `update()`.\n          if (__classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, \"f\")) {\n            return;\n          }\n          // Actual request starting.\n          __classPrivateFieldSet(this, _InnerChecker_currentHealthCheckId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\")}`, \"f\");\n          __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\") + 1, \"f\");\n          __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, {\n            id: __classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, \"f\"),\n            jsonrpc: '2.0',\n            method: 'system_health',\n            params: []\n          });\n        };\n        if (startNow) {\n          startHealthRequest();\n        } else {\n          __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, setTimeout(startHealthRequest, 1000), \"f\");\n        }\n      }\n      if (__classPrivateFieldGet(this, _InnerChecker_isSyncing, \"f\") && !__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\") && !__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\")) {\n        this.startSubscription();\n      }\n      if (!__classPrivateFieldGet(this, _InnerChecker_isSyncing, \"f\") && __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\") && !__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\")) {\n        this.endSubscription();\n      }\n    };\n    this.startSubscription = () => {\n      if (__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\") || __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n        throw new Error('Internal error in health checker');\n      }\n      __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\")}`, \"f\");\n      __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\") + 1, \"f\");\n      __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, {\n        id: __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\"),\n        jsonrpc: '2.0',\n        method: 'chain_subscribeNewHeads',\n        params: []\n      });\n    };\n    this.endSubscription = () => {\n      if (__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\") || !__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n        throw new Error('Internal error in health checker');\n      }\n      __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\")}`, \"f\");\n      __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\") + 1, \"f\");\n      __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, {\n        id: __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\"),\n        jsonrpc: '2.0',\n        method: 'chain_unsubscribeNewHeads',\n        params: [__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")]\n      });\n    };\n    this.destroy = () => {\n      if (__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\")) {\n        clearTimeout(__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\"));\n        __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, \"f\");\n      }\n    };\n    __classPrivateFieldSet(this, _InnerChecker_healthCallback, healthCallback, \"f\");\n    __classPrivateFieldSet(this, _InnerChecker_requestToSmoldot, request => requestToSmoldot(stringify(request)), \"f\");\n  }\n}\n_InnerChecker_healthCallback = new WeakMap(), _InnerChecker_currentHealthCheckId = new WeakMap(), _InnerChecker_currentHealthTimeout = new WeakMap(), _InnerChecker_currentSubunsubRequestId = new WeakMap(), _InnerChecker_currentSubscriptionId = new WeakMap(), _InnerChecker_requestToSmoldot = new WeakMap(), _InnerChecker_isSyncing = new WeakMap(), _InnerChecker_nextRequestId = new WeakMap();\nexport class HealthCheckError extends Error {\n  getCause() {\n    return __classPrivateFieldGet(this, _HealthCheckError_cause, \"f\");\n  }\n  constructor(response) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Got error response asking for system health';\n    super(message);\n    _HealthCheckError_cause.set(this, void 0);\n    __classPrivateFieldSet(this, _HealthCheckError_cause, response, \"f\");\n  }\n}\n_HealthCheckError_cause = new WeakMap();","map":{"version":3,"names":["_InnerChecker_healthCallback","_InnerChecker_currentHealthCheckId","_InnerChecker_currentHealthTimeout","_InnerChecker_currentSubunsubRequestId","_InnerChecker_currentSubscriptionId","_InnerChecker_requestToSmoldot","_InnerChecker_isSyncing","_InnerChecker_nextRequestId","_HealthCheckError_cause","__classPrivateFieldGet","__classPrivateFieldSet","stringify","healthChecker","checker","sendJsonRpc","responsePassThrough","jsonRpcResponse","request","Error","setSendJsonRpc","cb","start","healthCallback","InnerChecker","update","stop","destroy","constructor","requestToSmoldot","set","parsedRequest","JSON","parse","id","newId","call","parsedResponse","result","isSyncing","params","subscription","startsWith","slice","length","startNow","clearTimeout","startHealthRequest","jsonrpc","method","setTimeout","startSubscription","endSubscription","WeakMap","HealthCheckError","getCause","response","message","arguments","undefined"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/rpc-provider/substrate-connect/Health.js"],"sourcesContent":["var _InnerChecker_healthCallback, _InnerChecker_currentHealthCheckId, _InnerChecker_currentHealthTimeout, _InnerChecker_currentSubunsubRequestId, _InnerChecker_currentSubscriptionId, _InnerChecker_requestToSmoldot, _InnerChecker_isSyncing, _InnerChecker_nextRequestId, _HealthCheckError_cause;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { stringify } from '@polkadot/util';\n/*\n * Creates a new health checker.\n *\n * The role of the health checker is to report to the user the health of a smoldot chain.\n *\n * In order to use it, start by creating a health checker, and call `setSendJsonRpc` to set the\n * way to send a JSON-RPC request to a chain. The health checker is disabled by default. Use\n * `start()` in order to start the health checks. The `start()` function must be passed a callback called\n * when an update to the health of the node is available.\n *\n * In order to send a JSON-RPC request to the chain, you **must** use the `sendJsonRpc` function\n * of the health checker. The health checker rewrites the `id` of the requests it receives.\n *\n * When the chain send a JSON-RPC response, it must be passed to `responsePassThrough()`. This\n * function intercepts the responses destined to the requests that have been emitted by the health\n * checker and returns `null`. If the response doesn't concern the health checker, the response is\n * simply returned by the function.\n *\n * # How it works\n *\n * The health checker periodically calls the `system_health` JSON-RPC call in order to determine\n * the health of the chain.\n *\n * In addition to this, as long as the health check reports that `isSyncing` is `true`, the\n * health checker also maintains a subscription to new best blocks using `chain_subscribeNewHeads`.\n * Whenever a new block is notified, a health check is performed immediately in order to determine\n * whether `isSyncing` has changed to `false`.\n *\n * Thanks to this subscription, the latency of the report of the switch from `isSyncing: true` to\n * `isSyncing: false` is very low.\n *\n */\nexport function healthChecker() {\n    // `null` if health checker is not started.\n    let checker = null;\n    let sendJsonRpc = null;\n    return {\n        responsePassThrough: (jsonRpcResponse) => {\n            if (checker === null) {\n                return jsonRpcResponse;\n            }\n            return checker.responsePassThrough(jsonRpcResponse);\n        },\n        sendJsonRpc: (request) => {\n            if (!sendJsonRpc) {\n                throw new Error('setSendJsonRpc must be called before sending requests');\n            }\n            if (checker === null) {\n                sendJsonRpc(request);\n            }\n            else {\n                checker.sendJsonRpc(request);\n            }\n        },\n        setSendJsonRpc: (cb) => {\n            sendJsonRpc = cb;\n        },\n        start: (healthCallback) => {\n            if (checker !== null) {\n                throw new Error(\"Can't start the health checker multiple times in parallel\");\n            }\n            else if (!sendJsonRpc) {\n                throw new Error('setSendJsonRpc must be called before starting the health checks');\n            }\n            checker = new InnerChecker(healthCallback, sendJsonRpc);\n            checker.update(true);\n        },\n        stop: () => {\n            if (checker === null) {\n                return;\n            } // Already stopped.\n            checker.destroy();\n            checker = null;\n        }\n    };\n}\nclass InnerChecker {\n    constructor(healthCallback, requestToSmoldot) {\n        _InnerChecker_healthCallback.set(this, void 0);\n        _InnerChecker_currentHealthCheckId.set(this, null);\n        _InnerChecker_currentHealthTimeout.set(this, null);\n        _InnerChecker_currentSubunsubRequestId.set(this, null);\n        _InnerChecker_currentSubscriptionId.set(this, null);\n        _InnerChecker_requestToSmoldot.set(this, void 0);\n        _InnerChecker_isSyncing.set(this, false);\n        _InnerChecker_nextRequestId.set(this, 0);\n        this.sendJsonRpc = (request) => {\n            // Replace the `id` in the request to prefix the request ID with `extern:`.\n            let parsedRequest;\n            try {\n                parsedRequest = JSON.parse(request);\n            }\n            catch {\n                return;\n            }\n            if (parsedRequest.id) {\n                const newId = 'extern:' + stringify(parsedRequest.id);\n                parsedRequest.id = newId;\n            }\n            __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, parsedRequest);\n        };\n        this.responsePassThrough = (jsonRpcResponse) => {\n            let parsedResponse;\n            try {\n                parsedResponse = JSON.parse(jsonRpcResponse);\n            }\n            catch {\n                return jsonRpcResponse;\n            }\n            // Check whether response is a response to `system_health`.\n            if (parsedResponse.id && __classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, \"f\") === parsedResponse.id) {\n                __classPrivateFieldSet(this, _InnerChecker_currentHealthCheckId, null, \"f\");\n                // Check whether query was successful. It is possible for queries to fail for\n                // various reasons, such as the client being overloaded.\n                if (!parsedResponse.result) {\n                    this.update(false);\n                    return null;\n                }\n                __classPrivateFieldGet(this, _InnerChecker_healthCallback, \"f\").call(this, parsedResponse.result);\n                __classPrivateFieldSet(this, _InnerChecker_isSyncing, parsedResponse.result.isSyncing, \"f\");\n                this.update(false);\n                return null;\n            }\n            // Check whether response is a response to the subscription or unsubscription.\n            if (parsedResponse.id &&\n                __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\") === parsedResponse.id) {\n                __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, null, \"f\");\n                // Check whether query was successful. It is possible for queries to fail for\n                // various reasons, such as the client being overloaded.\n                if (!parsedResponse.result) {\n                    this.update(false);\n                    return null;\n                }\n                if (__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n                    __classPrivateFieldSet(this, _InnerChecker_currentSubscriptionId, null, \"f\");\n                }\n                else {\n                    __classPrivateFieldSet(this, _InnerChecker_currentSubscriptionId, parsedResponse.result, \"f\");\n                }\n                this.update(false);\n                return null;\n            }\n            // Check whether response is a notification to a subscription.\n            if (parsedResponse.params &&\n                __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\") &&\n                parsedResponse.params.subscription === __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n                // Note that after a successful subscription, a notification containing\n                // the current best block is always returned. Considering that a\n                // subscription is performed in response to a health check, calling\n                // `startHealthCheck()` here will lead to a second health check.\n                // It might seem redundant to perform two health checks in a quick\n                // succession, but doing so doesn't lead to any problem, and it is\n                // actually possible for the health to have changed in between as the\n                // current best block might have been updated during the subscription\n                // request.\n                this.update(true);\n                return null;\n            }\n            // Response doesn't concern us.\n            if (parsedResponse.id) {\n                const id = parsedResponse.id;\n                // Need to remove the `extern:` prefix.\n                if (!id.startsWith('extern:')) {\n                    throw new Error('State inconsistency in health checker');\n                }\n                const newId = JSON.parse(id.slice('extern:'.length));\n                parsedResponse.id = newId;\n            }\n            return stringify(parsedResponse);\n        };\n        this.update = (startNow) => {\n            // If `startNow`, clear `#currentHealthTimeout` so that it is set below.\n            if (startNow && __classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\")) {\n                clearTimeout(__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\"));\n                __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, \"f\");\n            }\n            if (!__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\")) {\n                const startHealthRequest = () => {\n                    __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, \"f\");\n                    // No matter what, don't start a health request if there is already one in progress.\n                    // This is sane to do because receiving a response to a health request calls `update()`.\n                    if (__classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, \"f\")) {\n                        return;\n                    }\n                    // Actual request starting.\n                    __classPrivateFieldSet(this, _InnerChecker_currentHealthCheckId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\")}`, \"f\");\n                    __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\") + 1, \"f\");\n                    __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, {\n                        id: __classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, \"f\"),\n                        jsonrpc: '2.0',\n                        method: 'system_health',\n                        params: []\n                    });\n                };\n                if (startNow) {\n                    startHealthRequest();\n                }\n                else {\n                    __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, setTimeout(startHealthRequest, 1000), \"f\");\n                }\n            }\n            if (__classPrivateFieldGet(this, _InnerChecker_isSyncing, \"f\") &&\n                !__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\") &&\n                !__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\")) {\n                this.startSubscription();\n            }\n            if (!__classPrivateFieldGet(this, _InnerChecker_isSyncing, \"f\") &&\n                __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\") &&\n                !__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\")) {\n                this.endSubscription();\n            }\n        };\n        this.startSubscription = () => {\n            if (__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\") || __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n                throw new Error('Internal error in health checker');\n            }\n            __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\")}`, \"f\");\n            __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\") + 1, \"f\");\n            __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, {\n                id: __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\"),\n                jsonrpc: '2.0',\n                method: 'chain_subscribeNewHeads',\n                params: []\n            });\n        };\n        this.endSubscription = () => {\n            if (__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\") || !__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")) {\n                throw new Error('Internal error in health checker');\n            }\n            __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\")}`, \"f\");\n            __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, \"f\") + 1, \"f\");\n            __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, \"f\").call(this, {\n                id: __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, \"f\"),\n                jsonrpc: '2.0',\n                method: 'chain_unsubscribeNewHeads',\n                params: [__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, \"f\")]\n            });\n        };\n        this.destroy = () => {\n            if (__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\")) {\n                clearTimeout(__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, \"f\"));\n                __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, \"f\");\n            }\n        };\n        __classPrivateFieldSet(this, _InnerChecker_healthCallback, healthCallback, \"f\");\n        __classPrivateFieldSet(this, _InnerChecker_requestToSmoldot, (request) => requestToSmoldot(stringify(request)), \"f\");\n    }\n}\n_InnerChecker_healthCallback = new WeakMap(), _InnerChecker_currentHealthCheckId = new WeakMap(), _InnerChecker_currentHealthTimeout = new WeakMap(), _InnerChecker_currentSubunsubRequestId = new WeakMap(), _InnerChecker_currentSubscriptionId = new WeakMap(), _InnerChecker_requestToSmoldot = new WeakMap(), _InnerChecker_isSyncing = new WeakMap(), _InnerChecker_nextRequestId = new WeakMap();\nexport class HealthCheckError extends Error {\n    getCause() {\n        return __classPrivateFieldGet(this, _HealthCheckError_cause, \"f\");\n    }\n    constructor(response, message = 'Got error response asking for system health') {\n        super(message);\n        _HealthCheckError_cause.set(this, void 0);\n        __classPrivateFieldSet(this, _HealthCheckError_cause, response, \"f\");\n    }\n}\n_HealthCheckError_cause = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}