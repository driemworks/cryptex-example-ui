{"ast":null,"code":"import { BigInt } from '@polkadot/x-bigint';\nimport { _0n, _1n } from './consts.js';\nimport { nToBigInt } from './toBigInt.js';\nconst DIV = BigInt(256);\nconst NEG_MASK = BigInt(0xff);\nfunction toU8a(value, isLe, isNegative) {\n  const arr = [];\n  if (isNegative) {\n    value = (value + _1n) * -_1n;\n  }\n  while (value !== _0n) {\n    const mod = value % DIV;\n    const val = Number(isNegative ? mod ^ NEG_MASK : mod);\n    if (isLe) {\n      arr.push(val);\n    } else {\n      arr.unshift(val);\n    }\n    value = (value - mod) / DIV;\n  }\n  return Uint8Array.from(arr);\n}\n/**\n * @name nToU8a\n * @summary Creates a Uint8Array object from a bigint.\n */\nexport function nToU8a(value) {\n  let {\n    bitLength = -1,\n    isLe = true,\n    isNegative = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const valueBi = nToBigInt(value);\n  if (valueBi === _0n) {\n    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(Math.ceil((bitLength || 0) / 8));\n  }\n  const u8a = toU8a(valueBi, isLe, isNegative);\n  if (bitLength === -1) {\n    return u8a;\n  }\n  const byteLength = Math.ceil((bitLength || 0) / 8);\n  const output = new Uint8Array(byteLength);\n  if (isNegative) {\n    output.fill(0xff);\n  }\n  output.set(u8a, isLe ? 0 : byteLength - u8a.length);\n  return output;\n}","map":{"version":3,"names":["BigInt","_0n","_1n","nToBigInt","DIV","NEG_MASK","toU8a","value","isLe","isNegative","arr","mod","val","Number","push","unshift","Uint8Array","from","nToU8a","bitLength","arguments","length","undefined","valueBi","Math","ceil","u8a","byteLength","output","fill","set"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/util/bi/toU8a.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { _0n, _1n } from './consts.js';\nimport { nToBigInt } from './toBigInt.js';\nconst DIV = BigInt(256);\nconst NEG_MASK = BigInt(0xff);\nfunction toU8a(value, isLe, isNegative) {\n    const arr = [];\n    if (isNegative) {\n        value = (value + _1n) * -_1n;\n    }\n    while (value !== _0n) {\n        const mod = value % DIV;\n        const val = Number(isNegative\n            ? mod ^ NEG_MASK\n            : mod);\n        if (isLe) {\n            arr.push(val);\n        }\n        else {\n            arr.unshift(val);\n        }\n        value = (value - mod) / DIV;\n    }\n    return Uint8Array.from(arr);\n}\n/**\n * @name nToU8a\n * @summary Creates a Uint8Array object from a bigint.\n */\nexport function nToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {\n    const valueBi = nToBigInt(value);\n    if (valueBi === _0n) {\n        return bitLength === -1\n            ? new Uint8Array(1)\n            : new Uint8Array(Math.ceil((bitLength || 0) / 8));\n    }\n    const u8a = toU8a(valueBi, isLe, isNegative);\n    if (bitLength === -1) {\n        return u8a;\n    }\n    const byteLength = Math.ceil((bitLength || 0) / 8);\n    const output = new Uint8Array(byteLength);\n    if (isNegative) {\n        output.fill(0xff);\n    }\n    output.set(u8a, isLe ? 0 : byteLength - u8a.length);\n    return output;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,GAAG,EAAEC,GAAG,QAAQ,aAAa;AACtC,SAASC,SAAS,QAAQ,eAAe;AACzC,MAAMC,GAAG,GAAGJ,MAAM,CAAC,GAAG,CAAC;AACvB,MAAMK,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;AAC7B,SAASM,KAAKA,CAACC,KAAK,EAAEC,IAAI,EAAEC,UAAU,EAAE;EACpC,MAAMC,GAAG,GAAG,EAAE;EACd,IAAID,UAAU,EAAE;IACZF,KAAK,GAAG,CAACA,KAAK,GAAGL,GAAG,IAAI,CAACA,GAAG;EAChC;EACA,OAAOK,KAAK,KAAKN,GAAG,EAAE;IAClB,MAAMU,GAAG,GAAGJ,KAAK,GAAGH,GAAG;IACvB,MAAMQ,GAAG,GAAGC,MAAM,CAACJ,UAAU,GACvBE,GAAG,GAAGN,QAAQ,GACdM,GAAG,CAAC;IACV,IAAIH,IAAI,EAAE;MACNE,GAAG,CAACI,IAAI,CAACF,GAAG,CAAC;IACjB,CAAC,MACI;MACDF,GAAG,CAACK,OAAO,CAACH,GAAG,CAAC;IACpB;IACAL,KAAK,GAAG,CAACA,KAAK,GAAGI,GAAG,IAAIP,GAAG;EAC/B;EACA,OAAOY,UAAU,CAACC,IAAI,CAACP,GAAG,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,MAAMA,CAACX,KAAK,EAA4D;EAAA,IAA1D;IAAEY,SAAS,GAAG,CAAC,CAAC;IAAEX,IAAI,GAAG,IAAI;IAAEC,UAAU,GAAG;EAAM,CAAC,GAAAW,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAClF,MAAMG,OAAO,GAAGpB,SAAS,CAACI,KAAK,CAAC;EAChC,IAAIgB,OAAO,KAAKtB,GAAG,EAAE;IACjB,OAAOkB,SAAS,KAAK,CAAC,CAAC,GACjB,IAAIH,UAAU,CAAC,CAAC,CAAC,GACjB,IAAIA,UAAU,CAACQ,IAAI,CAACC,IAAI,CAAC,CAACN,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACzD;EACA,MAAMO,GAAG,GAAGpB,KAAK,CAACiB,OAAO,EAAEf,IAAI,EAAEC,UAAU,CAAC;EAC5C,IAAIU,SAAS,KAAK,CAAC,CAAC,EAAE;IAClB,OAAOO,GAAG;EACd;EACA,MAAMC,UAAU,GAAGH,IAAI,CAACC,IAAI,CAAC,CAACN,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC;EAClD,MAAMS,MAAM,GAAG,IAAIZ,UAAU,CAACW,UAAU,CAAC;EACzC,IAAIlB,UAAU,EAAE;IACZmB,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACrB;EACAD,MAAM,CAACE,GAAG,CAACJ,GAAG,EAAElB,IAAI,GAAG,CAAC,GAAGmB,UAAU,GAAGD,GAAG,CAACL,MAAM,CAAC;EACnD,OAAOO,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}