{"ast":null,"code":"var _jsxFileName = \"/home/driemworks/cryptex/ui/src/App.js\",\n  _s = $RefreshSig$();\n/* global BigInt */\nimport './App.css';\nimport { ApiPromise, WsProvider, Keyring } from \"@polkadot/api\";\nimport { w_keygen, w_calculate_secret, w_calculate_pubkey, w_combine_pubkeys, w_combine_secrets, w_encrypt, w_threshold_decrypt } from \"dkg-wasm\";\nimport { useWasm } from './useWasm';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // make sure the wasm blob is loaded\n  useWasm();\n  const [api, setApi] = useState(null);\n  const [acct, setAcct] = useState(null);\n  const [societyId, setSocietyId] = useState('');\n\n  // load the polkadotjs api\n  useEffect(() => {\n    const host = \"127.0.0.1\";\n    const port = \"9944\";\n    let provider = new WsProvider(`ws://${host}:${port}`);\n    const f = async () => {\n      console.log('try connect api');\n      const api = await ApiPromise.create({\n        provider,\n        types: {\n          SocietyId: \"Bytes\"\n        }\n      });\n      await api.isReady;\n      setApi(api);\n      console.log('api is ready');\n      // load ALICE account\n      const keyring = new Keyring({\n        type: 'sr25519'\n      });\n      let acct = keyring.addFromUri(\"//Alice\");\n      setAcct(acct);\n    };\n    f();\n  }, []);\n  const handleCreateSociety = () => {\n    let name = new TextEncoder().encode(\"MySpace\");\n    let id = '0x1';\n    let threshold = 2;\n    let deadline = 100;\n    let members = [];\n    api.tx.society.createSociety(id, threshold, name, deadline, members).signAndSend(acct, api).then(result => {\n      if (result.isInBlock) {\n        console.log('the tx was successful');\n      }\n      if (result.isFinalized) {\n        console.log('the tx is finalized');\n        setSocietyId(id);\n      }\n    });\n  };\n  const handleKeygen = () => {\n    // each participant must agree on two numbers\n    let r1 = 45432;\n    let r2 = 48484;\n    let threshold = 2;\n    let id = '0x1';\n    // generate random number \n    let r = 23;\n    let poly = w_keygen(BigInt(r), threshold);\n    let secret = w_calculate_secret(poly.coeffs);\n    let pubkey = w_calculate_pubkey(BigInt(r1), BigInt(r2), secret);\n    api.tx.society.joinSociety(id, pubkey.g2).signAndSend(acct, api).then(result => {\n      if (result.isFinalized) {\n        console.log('the tx is finalized');\n      }\n    });\n  };\n\n  // const calculateGroupPublicKey = () => {\n  //   return society.reduce((a, b) => w_combine_pubkeys(a.pubkey, b.pubkey));\n  // }\n\n  // const calculateGroupSecretKey = () => {\n  //   return society.reduce((a, b) => w_combine_secrets(a.secret, b.secret));\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"DKG Wasm Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Generate keys, encrypt and decrypt messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section\",\n        children: societyId === '' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Create a Society\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCreateSociety,\n            children: \" Create Society\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Society: \", societyId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleKeygen,\n            children: \"Generate keys\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oRiQ5hXR64EWQo4+gUSl7xo8Zeg=\", false, function () {\n  return [useWasm];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ApiPromise","WsProvider","Keyring","w_keygen","w_calculate_secret","w_calculate_pubkey","w_combine_pubkeys","w_combine_secrets","w_encrypt","w_threshold_decrypt","useWasm","useEffect","useState","jsxDEV","_jsxDEV","App","_s","api","setApi","acct","setAcct","societyId","setSocietyId","host","port","provider","f","console","log","create","types","SocietyId","isReady","keyring","type","addFromUri","handleCreateSociety","name","TextEncoder","encode","id","threshold","deadline","members","tx","society","createSociety","signAndSend","then","result","isInBlock","isFinalized","handleKeygen","r1","r2","r","poly","BigInt","secret","coeffs","pubkey","joinSociety","g2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/driemworks/cryptex/ui/src/App.js"],"sourcesContent":["/* global BigInt */\r\nimport './App.css';\r\nimport { ApiPromise, WsProvider, Keyring } from \"@polkadot/api\";\r\nimport { \r\n    w_keygen, w_calculate_secret, \r\n    w_calculate_pubkey, w_combine_pubkeys,\r\n    w_combine_secrets, w_encrypt, w_threshold_decrypt\r\n} from \"dkg-wasm\";\r\nimport { useWasm } from './useWasm';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction App() {\r\n  // make sure the wasm blob is loaded\r\n  useWasm();\r\n\r\n  const [api, setApi] = useState(null);\r\n  const [acct, setAcct] = useState(null);\r\n\r\n  const [societyId, setSocietyId] = useState('');\r\n\r\n  // load the polkadotjs api\r\n  useEffect(() => {\r\n    const host = \"127.0.0.1\";\r\n    const port = \"9944\";\r\n    let provider = new WsProvider(`ws://${host}:${port}`);\r\n    const f = async () => {\r\n      console.log('try connect api');\r\n      const api = await ApiPromise.create({\r\n        provider,\r\n        types: {\r\n          SocietyId: \"Bytes\",\r\n        }\r\n      });\r\n      await api.isReady;\r\n      setApi(api);\r\n      console.log('api is ready');\r\n      // load ALICE account\r\n      const keyring = new Keyring({ type: 'sr25519' });\r\n      let acct = keyring.addFromUri(\"//Alice\");\r\n      setAcct(acct);\r\n    }\r\n    f();\r\n  }, []);\r\n\r\n  const handleCreateSociety = () => {\r\n    let name = new TextEncoder().encode(\"MySpace\");\r\n    let id = '0x1';\r\n    let threshold = 2;\r\n    let deadline = 100;\r\n    let members = []\r\n    api.tx.society.createSociety(\r\n      id, threshold, name, deadline, members\r\n    ).signAndSend(acct, api).then(result => {\r\n      if (result.isInBlock) {\r\n        console.log('the tx was successful');\r\n      } \r\n      if (result.isFinalized) {\r\n        console.log('the tx is finalized');\r\n        setSocietyId(id);\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleKeygen = () => {\r\n    // each participant must agree on two numbers\r\n    let r1 = 45432;\r\n    let r2 = 48484;\r\n    let threshold = 2;\r\n    let id = '0x1';\r\n    // generate random number \r\n    let r = 23;\r\n    let poly = w_keygen(BigInt(r), threshold);\r\n    let secret = w_calculate_secret(poly.coeffs);\r\n    let pubkey = w_calculate_pubkey(BigInt(r1), BigInt(r2), secret);\r\n    \r\n    api.tx.society.joinSociety(\r\n      id, pubkey.g2,\r\n    ).signAndSend(\r\n      acct, api,\r\n    ).then(result => {\r\n      if (result.isFinalized) {\r\n        console.log('the tx is finalized');\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  // const calculateGroupPublicKey = () => {\r\n  //   return society.reduce((a, b) => w_combine_pubkeys(a.pubkey, b.pubkey));\r\n  // }\r\n\r\n  // const calculateGroupSecretKey = () => {\r\n  //   return society.reduce((a, b) => w_combine_secrets(a.secret, b.secret));\r\n  // }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <h2>DKG Wasm Example</h2>\r\n        <p>Generate keys, encrypt and decrypt messages</p>\r\n      </div>\r\n      <div className='body'>\r\n        <div className='section'>\r\n          {societyId === '' ? \r\n          <div>\r\n            <span>\r\n              Create a Society\r\n            </span>\r\n            <button onClick={handleCreateSociety}> Create Society\r\n            </button>\r\n          </div> :\r\n          <div>\r\n            <span>\r\n              Society: {societyId}\r\n            </span>\r\n            <button onClick={handleKeygen}>\r\n              Generate keys\r\n            </button>\r\n          </div>\r\n        }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}