{"ast":null,"code":"import { typeToConstructor } from './typeToConstructor.js';\n/**\n * @description takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`\n */\nexport function mapToTypeMap(registry, input) {\n  const entries = Object.entries(input);\n  const count = entries.length;\n  const output = [new Array(count), new Array(count)];\n  for (let i = 0; i < count; i++) {\n    output[1][i] = entries[i][0];\n    output[0][i] = typeToConstructor(registry, entries[i][1]);\n  }\n  return output;\n}","map":{"version":3,"names":["typeToConstructor","mapToTypeMap","registry","input","entries","Object","count","length","output","Array","i"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types-codec/utils/mapToTypeMap.js"],"sourcesContent":["import { typeToConstructor } from './typeToConstructor.js';\n/**\n * @description takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`\n */\nexport function mapToTypeMap(registry, input) {\n    const entries = Object.entries(input);\n    const count = entries.length;\n    const output = [new Array(count), new Array(count)];\n    for (let i = 0; i < count; i++) {\n        output[1][i] = entries[i][0];\n        output[0][i] = typeToConstructor(registry, entries[i][1]);\n    }\n    return output;\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,wBAAwB;AAC1D;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EAC1C,MAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACD,KAAK,CAAC;EACrC,MAAMG,KAAK,GAAGF,OAAO,CAACG,MAAM;EAC5B,MAAMC,MAAM,GAAG,CAAC,IAAIC,KAAK,CAACH,KAAK,CAAC,EAAE,IAAIG,KAAK,CAACH,KAAK,CAAC,CAAC;EACnD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;IAC5BF,MAAM,CAAC,CAAC,CAAC,CAACE,CAAC,CAAC,GAAGN,OAAO,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5BF,MAAM,CAAC,CAAC,CAAC,CAACE,CAAC,CAAC,GAAGV,iBAAiB,CAACE,QAAQ,EAAEE,OAAO,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7D;EACA,OAAOF,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}