{"ast":null,"code":"var _GenericVote_aye, _GenericVote_conviction;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { Bool, U8aFixed } from '@polkadot/types-codec';\nimport { isBoolean, isNumber, isU8a, isUndefined } from '@polkadot/util';\nconst AYE_BITS = 0b10000000;\nconst NAY_BITS = 0b00000000;\nconst CON_MASK = 0b01111111;\nconst DEF_CONV = 0b00000000; // the default conviction, None\n/** @internal */\nfunction decodeVoteBool(value) {\n  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\nfunction decodeVoteU8a(value) {\n  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\nfunction decodeVoteType(registry, value) {\n  return new Uint8Array([(new Bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index]);\n}\n/** @internal */\nfunction decodeVote(registry, value) {\n  if (isU8a(value)) {\n    return decodeVoteU8a(value);\n  } else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {\n    return decodeVoteBool(new Bool(registry, value).isTrue);\n  } else if (isNumber(value)) {\n    return decodeVoteBool(value < 0);\n  }\n  return decodeVoteType(registry, value);\n}\n/**\n * @name GenericVote\n * @description\n * A number of lock periods, plus a vote, one way or the other.\n */\nexport class GenericVote extends U8aFixed {\n  constructor(registry, value) {\n    // decoded is just 1 byte\n    // Aye: Most Significant Bit\n    // Conviction: 0000 - 0101\n    const decoded = decodeVote(registry, value);\n    super(registry, decoded, 8);\n    _GenericVote_aye.set(this, void 0);\n    _GenericVote_conviction.set(this, void 0);\n    __classPrivateFieldSet(this, _GenericVote_aye, (decoded[0] & AYE_BITS) === AYE_BITS, \"f\");\n    __classPrivateFieldSet(this, _GenericVote_conviction, this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]), \"f\");\n  }\n  /**\n   * @description returns a V2 conviction\n   */\n  get conviction() {\n    return __classPrivateFieldGet(this, _GenericVote_conviction, \"f\");\n  }\n  /**\n   * @description true if the wrapped value is a positive vote\n   */\n  get isAye() {\n    return __classPrivateFieldGet(this, _GenericVote_aye, \"f\");\n  }\n  /**\n   * @description true if the wrapped value is a negative vote\n   */\n  get isNay() {\n    return !this.isAye;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman(isExpanded) {\n    return {\n      conviction: this.conviction.toHuman(isExpanded),\n      vote: this.isAye ? 'Aye' : 'Nay'\n    };\n  }\n  /**\n   * @description Converts the value in a best-fit primitive form\n   */\n  toPrimitive() {\n    return {\n      aye: this.isAye,\n      conviction: this.conviction.toPrimitive()\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    return 'Vote';\n  }\n}\n_GenericVote_aye = new WeakMap(), _GenericVote_conviction = new WeakMap();","map":{"version":3,"names":["_GenericVote_aye","_GenericVote_conviction","__classPrivateFieldGet","__classPrivateFieldSet","Bool","U8aFixed","isBoolean","isNumber","isU8a","isUndefined","AYE_BITS","NAY_BITS","CON_MASK","DEF_CONV","decodeVoteBool","value","Uint8Array","decodeVoteU8a","length","subarray","decodeVoteType","registry","aye","isTrue","createTypeUnsafe","conviction","index","decodeVote","Boolean","GenericVote","constructor","decoded","set","isAye","isNay","toHuman","isExpanded","vote","toPrimitive","toRawType","WeakMap"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/types/generic/Vote.js"],"sourcesContent":["var _GenericVote_aye, _GenericVote_conviction;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { Bool, U8aFixed } from '@polkadot/types-codec';\nimport { isBoolean, isNumber, isU8a, isUndefined } from '@polkadot/util';\nconst AYE_BITS = 0b10000000;\nconst NAY_BITS = 0b00000000;\nconst CON_MASK = 0b01111111;\nconst DEF_CONV = 0b00000000; // the default conviction, None\n/** @internal */\nfunction decodeVoteBool(value) {\n    return value\n        ? new Uint8Array([AYE_BITS | DEF_CONV])\n        : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\nfunction decodeVoteU8a(value) {\n    return value.length\n        ? value.subarray(0, 1)\n        : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\nfunction decodeVoteType(registry, value) {\n    return new Uint8Array([\n        (new Bool(registry, value.aye).isTrue\n            ? AYE_BITS\n            : NAY_BITS) |\n            registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index\n    ]);\n}\n/** @internal */\nfunction decodeVote(registry, value) {\n    if (isU8a(value)) {\n        return decodeVoteU8a(value);\n    }\n    else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {\n        return decodeVoteBool(new Bool(registry, value).isTrue);\n    }\n    else if (isNumber(value)) {\n        return decodeVoteBool(value < 0);\n    }\n    return decodeVoteType(registry, value);\n}\n/**\n * @name GenericVote\n * @description\n * A number of lock periods, plus a vote, one way or the other.\n */\nexport class GenericVote extends U8aFixed {\n    constructor(registry, value) {\n        // decoded is just 1 byte\n        // Aye: Most Significant Bit\n        // Conviction: 0000 - 0101\n        const decoded = decodeVote(registry, value);\n        super(registry, decoded, 8);\n        _GenericVote_aye.set(this, void 0);\n        _GenericVote_conviction.set(this, void 0);\n        __classPrivateFieldSet(this, _GenericVote_aye, (decoded[0] & AYE_BITS) === AYE_BITS, \"f\");\n        __classPrivateFieldSet(this, _GenericVote_conviction, this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]), \"f\");\n    }\n    /**\n     * @description returns a V2 conviction\n     */\n    get conviction() {\n        return __classPrivateFieldGet(this, _GenericVote_conviction, \"f\");\n    }\n    /**\n     * @description true if the wrapped value is a positive vote\n     */\n    get isAye() {\n        return __classPrivateFieldGet(this, _GenericVote_aye, \"f\");\n    }\n    /**\n     * @description true if the wrapped value is a negative vote\n     */\n    get isNay() {\n        return !this.isAye;\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman(isExpanded) {\n        return {\n            conviction: this.conviction.toHuman(isExpanded),\n            vote: this.isAye ? 'Aye' : 'Nay'\n        };\n    }\n    /**\n     * @description Converts the value in a best-fit primitive form\n     */\n    toPrimitive() {\n        return {\n            aye: this.isAye,\n            conviction: this.conviction.toPrimitive()\n        };\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType() {\n        return 'Vote';\n    }\n}\n_GenericVote_aye = new WeakMap(), _GenericVote_conviction = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}