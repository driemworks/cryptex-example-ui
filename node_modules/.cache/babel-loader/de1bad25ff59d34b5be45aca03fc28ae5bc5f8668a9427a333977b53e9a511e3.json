{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction queryConstants(api) {\n  return of([\n  // deprecated\n  api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'),\n  // current\n  api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);\n}\n/**\n * @name fees\n * @returns An object containing the combined results of the queries for\n * all relevant contract fees as declared in the substrate chain spec.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\n * });\n * ```\n */\nexport function fees(instanceId, api) {\n  return memo(instanceId, () => {\n    return queryConstants(api).pipe(map(_ref => {\n      let [callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit] = _ref;\n      return {\n        callBaseFee,\n        contractFee,\n        creationFee,\n        rentByteFee,\n        rentDepositOffset,\n        surchargeReward,\n        tombstoneDeposit,\n        transactionBaseFee,\n        transactionByteFee,\n        transferFee\n      };\n    }));\n  });\n}","map":{"version":3,"names":["map","of","memo","queryConstants","api","consts","contracts","callBaseFee","registry","createType","contractFee","creationFee","transactionBaseFee","transactionByteFee","transferFee","rentByteFee","rentDepositOffset","surchargeReward","tombstoneDeposit","fees","instanceId","pipe","_ref"],"sources":["/home/driemworks/cryptex/ui/node_modules/@polkadot/api-derive/contracts/fees.js"],"sourcesContent":["import { map, of } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction queryConstants(api) {\n    return of([\n        // deprecated\n        api.consts.contracts.callBaseFee || api.registry.createType('Balance'),\n        api.consts.contracts.contractFee || api.registry.createType('Balance'),\n        api.consts.contracts.creationFee || api.registry.createType('Balance'),\n        api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'),\n        api.consts.contracts.transactionByteFee || api.registry.createType('Balance'),\n        api.consts.contracts.transferFee || api.registry.createType('Balance'),\n        // current\n        api.consts.contracts.rentByteFee,\n        api.consts.contracts.rentDepositOffset,\n        api.consts.contracts.surchargeReward,\n        api.consts.contracts.tombstoneDeposit\n    ]);\n}\n/**\n * @name fees\n * @returns An object containing the combined results of the queries for\n * all relevant contract fees as declared in the substrate chain spec.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\n * });\n * ```\n */\nexport function fees(instanceId, api) {\n    return memo(instanceId, () => {\n        return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({\n            callBaseFee,\n            contractFee,\n            creationFee,\n            rentByteFee,\n            rentDepositOffset,\n            surchargeReward,\n            tombstoneDeposit,\n            transactionBaseFee,\n            transactionByteFee,\n            transferFee\n        })));\n    });\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAC9B,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,cAAcA,CAACC,GAAG,EAAE;EACzB,OAAOH,EAAE,CAAC;EACN;EACAG,GAAG,CAACC,MAAM,CAACC,SAAS,CAACC,WAAW,IAAIH,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,EACtEL,GAAG,CAACC,MAAM,CAACC,SAAS,CAACI,WAAW,IAAIN,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,EACtEL,GAAG,CAACC,MAAM,CAACC,SAAS,CAACK,WAAW,IAAIP,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,EACtEL,GAAG,CAACC,MAAM,CAACC,SAAS,CAACM,kBAAkB,IAAIR,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,EAC7EL,GAAG,CAACC,MAAM,CAACC,SAAS,CAACO,kBAAkB,IAAIT,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,EAC7EL,GAAG,CAACC,MAAM,CAACC,SAAS,CAACQ,WAAW,IAAIV,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC;EACtE;EACAL,GAAG,CAACC,MAAM,CAACC,SAAS,CAACS,WAAW,EAChCX,GAAG,CAACC,MAAM,CAACC,SAAS,CAACU,iBAAiB,EACtCZ,GAAG,CAACC,MAAM,CAACC,SAAS,CAACW,eAAe,EACpCb,GAAG,CAACC,MAAM,CAACC,SAAS,CAACY,gBAAgB,CACxC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,UAAU,EAAEhB,GAAG,EAAE;EAClC,OAAOF,IAAI,CAACkB,UAAU,EAAE,MAAM;IAC1B,OAAOjB,cAAc,CAACC,GAAG,CAAC,CAACiB,IAAI,CAACrB,GAAG,CAACsB,IAAA;MAAA,IAAC,CAACf,WAAW,EAAEG,WAAW,EAAEC,WAAW,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,gBAAgB,CAAC,GAAAI,IAAA;MAAA,OAAM;QACtMf,WAAW;QACXG,WAAW;QACXC,WAAW;QACXI,WAAW;QACXC,iBAAiB;QACjBC,eAAe;QACfC,gBAAgB;QAChBN,kBAAkB;QAClBC,kBAAkB;QAClBC;MACJ,CAAC;IAAA,CAAC,CAAC,CAAC;EACR,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}